{"ast":null,"code":"var _jsxFileName = \"/home/somya/Desktop/Teleconsulting/Frontend/src/ProtectedRoute.jsx\";\n// ProtectedRoute.jsx\nimport React from 'react';\nimport { Route, Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token; // Return true if the token exists, otherwise false\n};\nconst ProtectedRoute = ({\n  element: Component,\n  ...rest\n}) => {\n  const isAuthenticatedUser = isAuthenticated(); // Check if the user is authenticated\n\n  // If the user is authenticated, render the protected route. Otherwise, redirect to the login page\n  return isAuthenticatedUser ? /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    element: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 58\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 32\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/patientlogin\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 78\n  }, this);\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Route","Navigate","jsxDEV","_jsxDEV","isAuthenticated","token","localStorage","getItem","ProtectedRoute","element","Component","rest","isAuthenticatedUser","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/home/somya/Desktop/Teleconsulting/Frontend/src/ProtectedRoute.jsx"],"sourcesContent":["// ProtectedRoute.jsx\nimport React from 'react';\nimport { Route, Navigate } from 'react-router-dom';\n\nconst isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token; // Return true if the token exists, otherwise false\n};\n\nconst ProtectedRoute = ({ element: Component, ...rest }) => {\n  const isAuthenticatedUser = isAuthenticated(); // Check if the user is authenticated\n\n  // If the user is authenticated, render the protected route. Otherwise, redirect to the login page\n  return isAuthenticatedUser ? <Route {...rest} element={<Component />} /> : <Navigate to=\"/patientlogin\" />;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAO,CAAC,CAACF,KAAK,CAAC,CAAC;AAClB,CAAC;AAED,MAAMG,cAAc,GAAGA,CAAC;EAAEC,OAAO,EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,KAAK;EAC1D,MAAMC,mBAAmB,GAAGR,eAAe,CAAC,CAAC,CAAC,CAAC;;EAE/C;EACA,OAAOQ,mBAAmB,gBAAGT,OAAA,CAACH,KAAK;IAAA,GAAKW,IAAI;IAAEF,OAAO,eAAEN,OAAA,CAACO,SAAS;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAAGb,OAAA,CAACF,QAAQ;IAACgB,EAAE,EAAC;EAAe;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5G,CAAC;AAACE,EAAA,GALIV,cAAc;AAOpB,eAAeA,cAAc;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}