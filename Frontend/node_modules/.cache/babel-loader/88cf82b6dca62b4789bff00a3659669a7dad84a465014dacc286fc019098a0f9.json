{"ast":null,"code":"var _jsxFileName = \"/home/somya/Desktop/Teleconsulting/Frontend/src/components/GeographyChart.jsx\",\n  _s = $RefreshSig$();\nimport { useTheme } from \"@mui/material\";\nimport { ResponsiveChoropleth } from \"@nivo/geo\";\nimport { geoFeatures } from \"../data/mockGeoFeatures\";\nimport { tokens } from \"../theme\";\nimport { mockGeographyData as data } from \"../data/mockData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeographyChart = ({\n  isDashboard = false\n}) => {\n  _s();\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode);\n  return /*#__PURE__*/_jsxDEV(ResponsiveChoropleth, {\n    data: data,\n    theme: {\n      axis: {\n        domain: {\n          line: {\n            stroke: colors.grey[100]\n          }\n        },\n        legend: {\n          text: {\n            fill: colors.grey[100]\n          }\n        },\n        ticks: {\n          line: {\n            stroke: colors.grey[100],\n            strokeWidth: 1\n          },\n          text: {\n            fill: colors.grey[100]\n          }\n        }\n      },\n      legends: {\n        text: {\n          fill: colors.grey[100]\n        }\n      }\n    },\n    features: geoFeatures.features,\n    margin: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n    domain: [0, 1000000],\n    unknownColor: \"#666666\",\n    label: \"properties.name\",\n    valueFormat: \".2s\",\n    projectionScale: isDashboard ? 40 : 150,\n    projectionTranslation: isDashboard ? [0.49, 0.6] : [0.5, 0.5],\n    projectionRotation: [0, 0, 0],\n    borderWidth: 1.5,\n    borderColor: \"#ffffff\",\n    legends: !isDashboard ? [{\n      anchor: \"bottom-left\",\n      direction: \"column\",\n      justify: true,\n      translateX: 20,\n      translateY: -100,\n      itemsSpacing: 0,\n      itemWidth: 94,\n      itemHeight: 18,\n      itemDirection: \"left-to-right\",\n      itemTextColor: colors.grey[100],\n      itemOpacity: 0.85,\n      symbolSize: 18,\n      effects: [{\n        on: \"hover\",\n        style: {\n          itemTextColor: \"#ffffff\",\n          itemOpacity: 1\n        }\n      }]\n    }] : undefined\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_s(GeographyChart, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\n_c = GeographyChart;\nexport default GeographyChart;\nvar _c;\n$RefreshReg$(_c, \"GeographyChart\");","map":{"version":3,"names":["useTheme","ResponsiveChoropleth","geoFeatures","tokens","mockGeographyData","data","jsxDEV","_jsxDEV","GeographyChart","isDashboard","_s","theme","colors","palette","mode","axis","domain","line","stroke","grey","legend","text","fill","ticks","strokeWidth","legends","features","margin","top","right","bottom","left","unknownColor","label","valueFormat","projectionScale","projectionTranslation","projectionRotation","borderWidth","borderColor","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemTextColor","itemOpacity","symbolSize","effects","on","style","undefined","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/somya/Desktop/Teleconsulting/Frontend/src/components/GeographyChart.jsx"],"sourcesContent":["import { useTheme } from \"@mui/material\";\nimport { ResponsiveChoropleth } from \"@nivo/geo\";\nimport { geoFeatures } from \"../data/mockGeoFeatures\";\nimport { tokens } from \"../theme\";\nimport { mockGeographyData as data } from \"../data/mockData\";\n\nconst GeographyChart = ({ isDashboard = false }) => {\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode);\n  return (\n    <ResponsiveChoropleth\n      data={data}\n      theme={{\n        axis: {\n          domain: {\n            line: {\n              stroke: colors.grey[100],\n            },\n          },\n          legend: {\n            text: {\n              fill: colors.grey[100],\n            },\n          },\n          ticks: {\n            line: {\n              stroke: colors.grey[100],\n              strokeWidth: 1,\n            },\n            text: {\n              fill: colors.grey[100],\n            },\n          },\n        },\n        legends: {\n          text: {\n            fill: colors.grey[100],\n          },\n        },\n      }}\n      features={geoFeatures.features}\n      margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\n      domain={[0, 1000000]}\n      unknownColor=\"#666666\"\n      label=\"properties.name\"\n      valueFormat=\".2s\"\n      projectionScale={isDashboard ? 40 : 150}\n      projectionTranslation={isDashboard ? [0.49, 0.6] : [0.5, 0.5]}\n      projectionRotation={[0, 0, 0]}\n      borderWidth={1.5}\n      borderColor=\"#ffffff\"\n      legends={\n        !isDashboard\n          ? [\n              {\n                anchor: \"bottom-left\",\n                direction: \"column\",\n                justify: true,\n                translateX: 20,\n                translateY: -100,\n                itemsSpacing: 0,\n                itemWidth: 94,\n                itemHeight: 18,\n                itemDirection: \"left-to-right\",\n                itemTextColor: colors.grey[100],\n                itemOpacity: 0.85,\n                symbolSize: 18,\n                effects: [\n                  {\n                    on: \"hover\",\n                    style: {\n                      itemTextColor: \"#ffffff\",\n                      itemOpacity: 1,\n                    },\n                  },\n                ],\n              },\n            ]\n          : undefined\n      }\n    />\n  );\n};\n\nexport default GeographyChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}