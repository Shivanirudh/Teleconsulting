{"ast":null,"code":"var _jsxFileName = \"/home/somya/Desktop/Teleconsulting/Frontend/src/pages/DoctorLogin.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './../css/DoctorLogin.css';\nimport logo from './../images/doctor-logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorLogin = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isOtpSent, setIsOtpSent] = useState(false);\n  const [otp, setOtp] = useState('');\n  const handleGetOTP = () => {\n    // Assume OTP generation and sending logic here\n    // For demonstration, let's set a hardcoded OTP\n    const hardcodedOtp = '0000';\n    setOtp(hardcodedOtp);\n    setIsOtpSent(true);\n  };\n  const handleLogin = () => {\n    // Perform login logic here\n    if (otp === '' || password === '') {\n      alert('Please enter OTP and password');\n      return;\n    }\n    // Hardcoded username and password for testing\n    if (username === 'doctor@example.com' && password === 'password' && otp === '0000') {\n      alert('Login successful!');\n    } else {\n      alert('Invalid username, password, or OTP');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Doctor Logo\",\n        className: \"doctor-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter OTP\",\n        value: otp,\n        onChange: e => setOtp(e.target.value),\n        disabled: !isOtpSent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        disabled: !isOtpSent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGetOTP,\n        disabled: isOtpSent,\n        children: \"Get OTP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        disabled: !isOtpSent,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorLogin, \"Y62ciWWhLhAVCffnx0Yfn2eJHfI=\");\n_c = DoctorLogin;\nexport default DoctorLogin;\nvar _c;\n$RefreshReg$(_c, \"DoctorLogin\");","map":{"version":3,"names":["React","useState","logo","jsxDEV","_jsxDEV","DoctorLogin","_s","username","setUsername","password","setPassword","isOtpSent","setIsOtpSent","otp","setOtp","handleGetOTP","hardcodedOtp","handleLogin","alert","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","disabled","onClick","_c","$RefreshReg$"],"sources":["/home/somya/Desktop/Teleconsulting/Frontend/src/pages/DoctorLogin.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './../css/DoctorLogin.css';\nimport logo from './../images/doctor-logo.png';\n\nconst DoctorLogin = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isOtpSent, setIsOtpSent] = useState(false);\n  const [otp, setOtp] = useState('');\n\n  const handleGetOTP = () => {\n    // Assume OTP generation and sending logic here\n    // For demonstration, let's set a hardcoded OTP\n    const hardcodedOtp = '0000';\n    setOtp(hardcodedOtp);\n    setIsOtpSent(true);\n  };\n\n  const handleLogin = () => {\n    // Perform login logic here\n    if (otp === '' || password === '') {\n      alert('Please enter OTP and password');\n      return;\n    }\n    // Hardcoded username and password for testing\n    if (username === 'doctor@example.com' && password === 'password' && otp === '0000') {\n      alert('Login successful!');\n    } else {\n      alert('Invalid username, password, or OTP');\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"login-container\">\n        <img src={logo} alt=\"Doctor Logo\" className=\"doctor-logo\" />\n        <input type=\"email\" placeholder=\"Email\" value={username} onChange={(e) => setUsername(e.target.value)} />\n        <input type=\"text\" placeholder=\"Enter OTP\" value={otp} onChange={(e) => setOtp(e.target.value)} disabled={!isOtpSent} />\n        <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} disabled={!isOtpSent} />\n        <button onClick={handleGetOTP} disabled={isOtpSent}>Get OTP</button>\n        <button onClick={handleLogin} disabled={!isOtpSent}>Login</button>\n      </div>\n    </div>\n  );\n};\n\nexport default DoctorLogin;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}