{"ast":null,"code":"var _jsxFileName = \"/home/somya/Desktop/Teleconsulting/Frontend/src/pages/DoctorLogin.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorLogin = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isVerified, setIsVerified] = useState(false);\n  const [otp, setOtp] = useState('');\n  const handleLogin = () => {\n    // Perform verification logic here (e.g., check username and password)\n    // For demonstration purposes, let's assume it's verified if username and password are not empty\n    if (username && password) {\n      setIsVerified(true);\n      // Assume OTP generation and sending logic here\n      // For demonstration, let's generate a random OTP\n      const generatedOtp = Math.floor(1000 + Math.random() * 9000);\n      setOtp(generatedOtp);\n    }\n  };\n  const handleOtpVerification = () => {\n    // Perform OTP verification logic here\n    // For demonstration purposes, let's assume it's verified if OTP is correct\n    // In a real application, you'd compare the input OTP with the generated OTP\n    alert('OTP verified successfully!');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"doctor-logo.png\",\n        alt: \"Doctor Logo\",\n        className: \"doctor-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), isVerified && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"otp-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter OTP\",\n          value: otp,\n          onChange: e => setOtp(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleOtpVerification,\n          children: \"Verify OTP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorLogin, \"Kfs02JZ48Dj7WhX+qX7tZHrCS/M=\");\n_c = DoctorLogin;\nexport default DoctorLogin;\nvar _c;\n$RefreshReg$(_c, \"DoctorLogin\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DoctorLogin","_s","username","setUsername","password","setPassword","isVerified","setIsVerified","otp","setOtp","handleLogin","generatedOtp","Math","floor","random","handleOtpVerification","alert","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/home/somya/Desktop/Teleconsulting/Frontend/src/pages/DoctorLogin.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst DoctorLogin = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isVerified, setIsVerified] = useState(false);\n  const [otp, setOtp] = useState('');\n\n  const handleLogin = () => {\n    // Perform verification logic here (e.g., check username and password)\n    // For demonstration purposes, let's assume it's verified if username and password are not empty\n    if (username && password) {\n      setIsVerified(true);\n      // Assume OTP generation and sending logic here\n      // For demonstration, let's generate a random OTP\n      const generatedOtp = Math.floor(1000 + Math.random() * 9000);\n      setOtp(generatedOtp);\n    }\n  };\n\n  const handleOtpVerification = () => {\n    // Perform OTP verification logic here\n    // For demonstration purposes, let's assume it's verified if OTP is correct\n    // In a real application, you'd compare the input OTP with the generated OTP\n    alert('OTP verified successfully!');\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"login-container\">\n        <img src=\"doctor-logo.png\" alt=\"Doctor Logo\" className=\"doctor-logo\" />\n        <input type=\"text\" placeholder=\"Username\" value={username} onChange={(e) => setUsername(e.target.value)} />\n        <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n        <button onClick={handleLogin}>Login</button>\n        {isVerified && (\n          <div className=\"otp-section\">\n            <input type=\"text\" placeholder=\"Enter OTP\" value={otp} onChange={(e) => setOtp(e.target.value)} />\n            <button onClick={handleOtpVerification}>Verify OTP</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DoctorLogin;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}