{"ast":null,"code":"import { degToRad, getRandom, getRangeValue, updateAnimation } from \"@tsparticles/engine\";\nimport { Rotate } from \"./Options/Classes/Rotate.js\";\nconst double = 2,\n  doublePI = Math.PI * double,\n  identity = 1,\n  doublePIDeg = 360;\nexport class RotateUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n  async init(particle) {\n    const rotateOptions = particle.options.rotate;\n    if (!rotateOptions) {\n      return;\n    }\n    particle.rotate = {\n      enable: rotateOptions.animation.enable,\n      value: degToRad(getRangeValue(rotateOptions.value)),\n      min: 0,\n      max: doublePI\n    };\n    particle.pathRotation = rotateOptions.path;\n    let rotateDirection = rotateOptions.direction;\n    if (rotateDirection === \"random\") {\n      const index = Math.floor(getRandom() * double),\n        minIndex = 0;\n      rotateDirection = index > minIndex ? \"counter-clockwise\" : \"clockwise\";\n    }\n    switch (rotateDirection) {\n      case \"counter-clockwise\":\n      case \"counterClockwise\":\n        particle.rotate.status = \"decreasing\";\n        break;\n      case \"clockwise\":\n        particle.rotate.status = \"increasing\";\n        break;\n    }\n    const rotateAnimation = rotateOptions.animation;\n    if (rotateAnimation.enable) {\n      particle.rotate.decay = identity - getRangeValue(rotateAnimation.decay);\n      particle.rotate.velocity = getRangeValue(rotateAnimation.speed) / doublePIDeg * this.container.retina.reduceFactor;\n      if (!rotateAnimation.sync) {\n        particle.rotate.velocity *= getRandom();\n      }\n    }\n    particle.rotation = particle.rotate.value;\n    await Promise.resolve();\n  }\n  isEnabled(particle) {\n    const rotate = particle.options.rotate;\n    if (!rotate) {\n      return false;\n    }\n    return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n  }\n  loadOptions(options, ...sources) {\n    if (!options.rotate) {\n      options.rotate = new Rotate();\n    }\n    for (const source of sources) {\n      options.rotate.load(source?.rotate);\n    }\n  }\n  async update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    if (!particle.rotate) {\n      return;\n    }\n    updateAnimation(particle, particle.rotate, false, \"none\", delta);\n    particle.rotation = particle.rotate.value;\n    await Promise.resolve();\n  }\n}","map":{"version":3,"names":["degToRad","getRandom","getRangeValue","updateAnimation","Rotate","double","doublePI","Math","PI","identity","doublePIDeg","RotateUpdater","constructor","container","init","particle","rotateOptions","options","rotate","enable","animation","value","min","max","pathRotation","path","rotateDirection","direction","index","floor","minIndex","status","rotateAnimation","decay","velocity","speed","retina","reduceFactor","sync","rotation","Promise","resolve","isEnabled","destroyed","spawning","loadOptions","sources","source","load","update","delta"],"sources":["/home/aksh2002/Desktop/Teleconsulting/node_modules/@tsparticles/updater-rotate/browser/RotateUpdater.js"],"sourcesContent":["import { degToRad, getRandom, getRangeValue, updateAnimation, } from \"@tsparticles/engine\";\nimport { Rotate } from \"./Options/Classes/Rotate.js\";\nconst double = 2, doublePI = Math.PI * double, identity = 1, doublePIDeg = 360;\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    async init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: degToRad(getRangeValue(rotateOptions.value)),\n            min: 0,\n            max: doublePI,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(getRandom() * double), minIndex = 0;\n            rotateDirection = index > minIndex ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.rotate.status = \"increasing\";\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = identity - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / doublePIDeg) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source?.rotate);\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        if (!particle.rotate) {\n            return;\n        }\n        updateAnimation(particle, particle.rotate, false, \"none\", delta);\n        particle.rotation = particle.rotate.value;\n        await Promise.resolve();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}