{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  // Define dummy schedule data\n  const dummySchedule = {\n    \"slots\": [[2024, 4, 5, 11, 15], [2024, 4, 6, 15, 45], [2024, 4, 7, 15, 0], [2024, 4, 6, 15, 45], [2024, 4, 5, 15, 0]],\n    \"appointments\": [{\n      id: 1,\n      date: '2024,4,5',\n      time: '09:00',\n      patientName: 'John Doe'\n    }, {\n      id: 2,\n      date: '2024,4,6',\n      time: '10:30',\n      patientName: 'somebody someone'\n    }, {\n      id: 3,\n      date: '2024,4,7',\n      time: '11:15',\n      patientName: 'Alice Smith'\n    }, {\n      id: 5,\n      date: '2024,4,6',\n      time: '09:00',\n      patientName: 'John Doe'\n    }]\n  };\n\n  // Function to extract unique dates from slots and appointments\n  const extractUniqueDates = () => {\n    const allDates = new Set();\n    dummySchedule.slots.forEach(slot => {\n      const dateStr = `${slot[0]},${slot[1]},${slot[2]}`;\n      allDates.add(dateStr);\n    });\n    dummySchedule.appointments.forEach(appointment => {\n      const dateStr = appointment.date;\n      allDates.add(dateStr);\n    });\n    return Array.from(allDates);\n  };\n\n  // Function to generate time slots\n  const generateTimeSlots = () => {\n    const timeSlots = [];\n    for (let hour = 9; hour <= 15; hour++) {\n      for (let minute = 0; minute < 60; minute += 45) {\n        timeSlots.push(`${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`);\n      }\n    }\n    return timeSlots;\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n  useEffect(() => {\n    // Extract unique dates\n    const uniqueDates = extractUniqueDates();\n\n    // Initialize schedule with dummy data\n    const initialSchedule = uniqueDates.map(date => {\n      const availability = generateTimeSlots().map(() => 'busy'); // Initialize all as busy\n      const dateString = date;\n      const appointments = dummySchedule.appointments.filter(appointment => appointment.date === date);\n      const slots = dummySchedule.slots.filter(slot => {\n        const slotDateStr = `${slot[0]},${slot[1]},${slot[2]}`;\n        return slotDateStr === date;\n      });\n      slots.forEach(slot => {\n        const slotTime = `${slot[3]}:${slot[4]}`;\n        const index = generateTimeSlots().indexOf(slotTime);\n        availability[index] = 'available';\n      });\n      appointments.forEach(appointment => {\n        const appointmentTime = appointment.time;\n        const index = generateTimeSlots().indexOf(appointmentTime);\n        availability[index] = 'booked';\n      });\n      return {\n        date: dateString,\n        availability\n      };\n    });\n    setSchedule(initialSchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    if (isEditing) {\n      const updatedSchedule = [...schedule];\n      const cellValue = updatedSchedule[dateIndex].availability[timeIndex];\n      if (cellValue !== 'booked') {\n        updatedSchedule[dateIndex].availability[timeIndex] = cellValue === 'available' ? 'busy' : 'available';\n        setSchedule(updatedSchedule);\n      }\n    }\n  };\n\n  // Function to generate table rows\n  const generateScheduleRows = () => {\n    return schedule.map((item, dateIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        scope: \"row\",\n        children: item.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), item.availability.map((availability, timeIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n        className: getClassForAvailability(availability),\n        onClick: () => handleCellClick(dateIndex, timeIndex)\n      }, `${item.date}-${timeIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))]\n    }, item.date, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this));\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = availability => {\n    switch (availability) {\n      case 'available':\n        return 'table-success bg-success text-white';\n      case 'booked':\n        return 'table-danger bg-danger text-dark';\n      case 'busy':\n        return 'table-secondary bg-secondary text-white';\n      default:\n        return '';\n    }\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box khus\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 17\n              }, this), generateTimeSlots().map(time => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: time\n              }, time, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: generateScheduleRows()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleEdit,\n          children: isEditing ? 'Cancel Edit' : 'Edit Schedule'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"++4b96eULKbdgzoKDSJcjB7i644=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","useEffect","SideNavbar","Navbar","jsxDEV","_jsxDEV","UploadSchedule","_s","dummySchedule","id","date","time","patientName","extractUniqueDates","allDates","Set","slots","forEach","slot","dateStr","add","appointments","appointment","Array","from","generateTimeSlots","timeSlots","hour","minute","push","toString","padStart","schedule","setSchedule","isEditing","setIsEditing","uniqueDates","initialSchedule","map","availability","dateString","filter","slotDateStr","slotTime","index","indexOf","appointmentTime","handleEdit","handleCellClick","dateIndex","timeIndex","updatedSchedule","cellValue","generateScheduleRows","item","children","scope","fileName","_jsxFileName","lineNumber","columnNumber","className","getClassForAvailability","onClick","handleSubmit","alert","Promise","resolve","setTimeout","type","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\n\nexport default function UploadSchedule() {\n  // Define dummy schedule data\n  const dummySchedule = {\n    \"slots\": [\n      [2024, 4, 5, 11, 15],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 7, 15, 0],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 5, 15, 0]\n    ],\n    \"appointments\": [\n      { id: 1, date: '2024,4,5', time: '09:00', patientName: 'John Doe' },\n      { id: 2, date: '2024,4,6', time: '10:30', patientName: 'somebody someone' },\n      { id: 3, date: '2024,4,7', time: '11:15', patientName: 'Alice Smith' },\n      { id: 5, date: '2024,4,6', time: '09:00', patientName: 'John Doe' },\n    ]\n  };\n\n  // Function to extract unique dates from slots and appointments\n  const extractUniqueDates = () => {\n    const allDates = new Set();\n    dummySchedule.slots.forEach(slot => {\n      const dateStr = `${slot[0]},${slot[1]},${slot[2]}`;\n      allDates.add(dateStr);\n    });\n    dummySchedule.appointments.forEach(appointment => {\n      const dateStr = appointment.date;\n      allDates.add(dateStr);\n    });\n    return Array.from(allDates);\n  };\n\n  // Function to generate time slots\n  const generateTimeSlots = () => {\n    const timeSlots = [];\n    for (let hour = 9; hour <= 15; hour++) {\n      for (let minute = 0; minute < 60; minute += 45) {\n        timeSlots.push(`${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`);\n      }\n    }\n    return timeSlots;\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  useEffect(() => {\n    // Extract unique dates\n    const uniqueDates = extractUniqueDates();\n\n    // Initialize schedule with dummy data\n    const initialSchedule = uniqueDates.map(date => {\n      const availability = generateTimeSlots().map(() => 'busy'); // Initialize all as busy\n      const dateString = date;\n      const appointments = dummySchedule.appointments.filter(appointment => appointment.date === date);\n      const slots = dummySchedule.slots.filter(slot => {\n        const slotDateStr = `${slot[0]},${slot[1]},${slot[2]}`;\n        return slotDateStr === date;\n      });\n      slots.forEach(slot => {\n        const slotTime = `${slot[3]}:${slot[4]}`;\n        const index = generateTimeSlots().indexOf(slotTime);\n        availability[index] = 'available';\n      });\n      appointments.forEach(appointment => {\n        const appointmentTime = appointment.time;\n        const index = generateTimeSlots().indexOf(appointmentTime);\n        availability[index] = 'booked';\n      });\n      return { date: dateString, availability };\n    });\n    setSchedule(initialSchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    if (isEditing) {\n      const updatedSchedule = [...schedule];\n      const cellValue = updatedSchedule[dateIndex].availability[timeIndex];\n      if (cellValue !== 'booked') {\n        updatedSchedule[dateIndex].availability[timeIndex] = cellValue === 'available' ? 'busy' : 'available';\n        setSchedule(updatedSchedule);\n      }\n    }\n  };\n\n  // Function to generate table rows\n  const generateScheduleRows = () => {\n    return schedule.map((item, dateIndex) => (\n      <tr key={item.date}>\n        <th scope=\"row\">{item.date}</th>\n        {item.availability.map((availability, timeIndex) => (\n          <td\n            key={`${item.date}-${timeIndex}`}\n            className={getClassForAvailability(availability)}\n            onClick={() => handleCellClick(dateIndex, timeIndex)}\n          ></td>\n        ))}\n      </tr>\n    ));\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = (availability) => {\n    switch (availability) {\n      case 'available':\n        return 'table-success bg-success text-white';\n      case 'booked':\n        return 'table-danger bg-danger text-dark';\n      case 'busy':\n        return 'table-secondary bg-secondary text-white';\n      default:\n        return '';\n    }\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className= 'dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This week's Schedule</h2>\n          <table className=\"table table-bordered custom-box khus\">\n            <thead>\n              <tr>\n                <th></th>\n                {generateTimeSlots().map(time => (\n                  <th key={time}>{time}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {generateScheduleRows()}\n            </tbody>\n          </table>\n\n          <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleEdit}>\n            {isEditing ? 'Cancel Edit' : 'Edit Schedule'}\n          </button>\n          {isEditing && (\n            <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleSubmit}>\n              Submit\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}