{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  // Dummy schedule data (replace with your actual data source)\n  const dummySchedule = {\n    \"slots\": [[2024, 4, 5, 11, 15], [2024, 4, 6, 15, 45], [2024, 4, 7, 15, 0], [2024, 4, 6, 15, 45], [2024, 4, 5, 15, 0]]\n  };\n\n  // Function to generate time slots with 45-minute intervals\n  const generateTimeSlots = () => {\n    const startTime = 9 * 60; // 9:00 AM in minutes\n    const endTime = 17 * 60 + 15; // 5:15 PM in minutes\n    const interval = 45; // 45 minutes interval\n    const timeSlots = [];\n    for (let i = startTime; i <= endTime; i += interval) {\n      const hours = Math.floor(i / 60);\n      const minutes = i % 60;\n      const formattedTime = `${hours < 10 ? '0' : ''}${hours}:${minutes === 0 ? '00' : minutes}`;\n      timeSlots.push(formattedTime);\n    }\n    return timeSlots;\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState(generateEmptySchedule());\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (date, time) => {\n    setSchedule(prevSchedule => ({\n      ...prevSchedule,\n      [date]: {\n        ...prevSchedule[date],\n        [time]: !prevSchedule[date][time]\n      }\n    }));\n  };\n\n  // Function to generate schedule from dummy data\n  function generateScheduleFromDummy() {\n    const timeSlots = generateTimeSlots();\n    const initialSchedule = {};\n    dummySchedule.slots.forEach(slot => {\n      const [year, month, day, hour, minute] = slot;\n      const date = new Date(year, month - 1, day);\n      const formattedDate = date.toLocaleDateString('en-US');\n      const formattedHour = `${hour < 10 ? '0' : ''}${hour}:${minute === 0 ? '00' : minute}`;\n      if (!initialSchedule[formattedDate]) {\n        initialSchedule[formattedDate] = {};\n      }\n      if (timeSlots.includes(formattedHour)) {\n        initialSchedule[formattedDate][formattedHour] = true;\n      }\n    });\n    return initialSchedule;\n  }\n  useEffect(() => {\n    setSchedule(generateScheduleFromDummy());\n  }, []);\n\n  // Function to generate empty schedule (for upload mode)\n  const generateEmptySchedule = () => {\n    const next7Days = Array.from({\n      length: 7\n    }, (_, index) => {\n      const today = new Date();\n      const date = new Date(today);\n      date.setDate(date.getDate() + index);\n      return date.toLocaleDateString('en-US');\n    });\n    const timeSlots = generateTimeSlots();\n    const emptySchedule = next7Days.reduce((acc, date) => {\n      acc[date] = timeSlots.reduce((acc2, time) => {\n        acc2[time] = false; // All slots initially unavailable\n        return acc2;\n      }, {});\n      return acc;\n    }, {});\n    return emptySchedule;\n  };\n  const handleUpload = () => {\n    setSchedule(generateEmptySchedule()); // Reset schedule to empty for upload\n    setIsEditing(true); // Enable editing mode for upload\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 17\n              }, this), generateTimeSlots().map(time => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: time\n              }, time, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: Object.entries(schedule).map(([date, timeslots]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"row\",\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this), Object.entries(timeslots).map(([time, available]) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: available ? 'table-success bg-success text-white' : 'table-secondary',\n                onClick: () => isEditing ? handleCellClick(date, time) : null,\n                children: isEditing ? '' : time\n              }, `${date}-${time}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 21\n              }, this))]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleEdit,\n          children: isEditing ? 'Cancel Edit' : 'Edit Schedule'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-success custom-button2\",\n          onClick: handleUpload,\n          children: \"Upload New Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"UqwlM4l6wozDqwtx+Hjp4tKCdHA=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","useEffect","SideNavbar","Navbar","jsxDEV","_jsxDEV","UploadSchedule","_s","dummySchedule","generateTimeSlots","startTime","endTime","interval","timeSlots","i","hours","Math","floor","minutes","formattedTime","push","schedule","setSchedule","generateEmptySchedule","isEditing","setIsEditing","handleEdit","handleCellClick","date","time","prevSchedule","generateScheduleFromDummy","initialSchedule","slots","forEach","slot","year","month","day","hour","minute","Date","formattedDate","toLocaleDateString","formattedHour","includes","next7Days","Array","from","length","_","index","today","setDate","getDate","emptySchedule","reduce","acc","acc2","handleUpload","handleSubmit","alert","Promise","resolve","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","Object","entries","timeslots","scope","available","onClick","type","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\n\nexport default function UploadSchedule() {\n  // Dummy schedule data (replace with your actual data source)\n  const dummySchedule = {\n    \"slots\": [\n      [2024, 4, 5, 11, 15],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 7, 15, 0],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 5, 15, 0]\n    ]\n  };\n\n  // Function to generate time slots with 45-minute intervals\n  const generateTimeSlots = () => {\n    const startTime = 9 * 60; // 9:00 AM in minutes\n    const endTime = 17 * 60 + 15; // 5:15 PM in minutes\n    const interval = 45; // 45 minutes interval\n    const timeSlots = [];\n\n    for (let i = startTime; i <= endTime; i += interval) {\n      const hours = Math.floor(i / 60);\n      const minutes = i % 60;\n      const formattedTime = `${hours < 10 ? '0' : ''}${hours}:${minutes === 0 ? '00' : minutes}`;\n      timeSlots.push(formattedTime);\n    }\n\n    return timeSlots;\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState(generateEmptySchedule());\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (date, time) => {\n    setSchedule((prevSchedule) => ({\n      ...prevSchedule,\n      [date]: {\n        ...prevSchedule[date],\n        [time]: !prevSchedule[date][time],\n      },\n    }));\n  };\n\n  // Function to generate schedule from dummy data\n  function generateScheduleFromDummy() {\n    const timeSlots = generateTimeSlots();\n    const initialSchedule = {};\n\n    dummySchedule.slots.forEach(slot => {\n      const [year, month, day, hour, minute] = slot;\n      const date = new Date(year, month - 1, day);\n      const formattedDate = date.toLocaleDateString('en-US');\n      const formattedHour = `${hour < 10 ? '0' : ''}${hour}:${minute === 0 ? '00' : minute}`;\n\n      if (!initialSchedule[formattedDate]) {\n        initialSchedule[formattedDate] = {};\n      }\n\n      if (timeSlots.includes(formattedHour)) {\n        initialSchedule[formattedDate][formattedHour] = true;\n      }\n    });\n\n    return initialSchedule;\n  }\n\n  useEffect(() => {\n    setSchedule(generateScheduleFromDummy());\n  }, []);\n\n  // Function to generate empty schedule (for upload mode)\n  const generateEmptySchedule = () => {\n    const next7Days = Array.from({ length: 7 }, (_, index) => {\n      const today = new Date();\n      const date = new Date(today);\n      date.setDate(date.getDate() + index);\n      return date.toLocaleDateString('en-US');\n    });\n\n    const timeSlots = generateTimeSlots();\n\n    const emptySchedule = next7Days.reduce((acc, date) => {\n      acc[date] = timeSlots.reduce((acc2, time) => {\n        acc2[time] = false; // All slots initially unavailable\n        return acc2;\n      }, {});\n      return acc;\n    }, {});\n\n    return emptySchedule;\n  };\n\n  const handleUpload = () => {\n    setSchedule(generateEmptySchedule()); // Reset schedule to empty for upload\n    setIsEditing(true); // Enable editing mode for upload\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className= 'dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This week's Schedule</h2>\n          <table className=\"table table-bordered custom-box\">\n            <thead>\n              <tr>\n                <th></th>\n                {generateTimeSlots().map(time => (\n                  <th key={time}>{time}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(schedule).map(([date, timeslots]) => (\n                <tr key={date}>\n                  <th scope=\"row\">{date}</th>\n                  {Object.entries(timeslots).map(([time, available]) => (\n                    <td\n                      key={`${date}-${time}`}\n                      className={\n                        available ? 'table-success bg-success text-white' : 'table-secondary'\n                      }\n                      onClick={() => (isEditing ? handleCellClick(date, time) : null)}\n                    >\n                      {isEditing ? '' : time}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n\n          <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleEdit}>\n            {isEditing ? 'Cancel Edit' : 'Edit Schedule'}\n          </button>\n          {isEditing ? (\n            <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleSubmit}>\n              Submit\n            </button>\n          ) : (\n            <button type=\"button\" className=\"btn btn-success custom-button2\" onClick={handleUpload}>\n              Upload New Schedule\n            </button>)}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,sCAAsC,CAAC,CAAC;AAC/C,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,MAAM,MAAM,gCAAgC;AACnD,OAAO,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,eAAe,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACvC;EACA,MAAMC,aAAa,GAAG;IACpB,OAAO,EAAE,CACP,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACpB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACpB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EACnB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACpB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EAEvB,CAAC;;EAED;EACA,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMC,SAAS,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;IAC1B,MAAMC,OAAO,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAC9B,MAAMC,QAAQ,GAAG,EAAE,CAAC,CAAC;IACrB,MAAMC,SAAS,GAAG,EAAE;IAEpB,KAAK,IAAIC,CAAC,GAAGJ,SAAS,EAAEI,CAAC,IAAIH,OAAO,EAAEG,CAAC,IAAIF,QAAQ,EAAE;MACnD,MAAMG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,GAAG,EAAE,CAAC;MAChC,MAAMI,OAAO,GAAGJ,CAAC,GAAG,EAAE;MACtB,MAAMK,aAAa,GAAI,GAAEJ,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAG,GAAEA,KAAM,IAAGG,OAAO,KAAK,CAAC,GAAG,IAAI,GAAGA,OAAQ,EAAC;MAC1FL,SAAS,CAACO,IAAI,CAACD,aAAa,CAAC;IAC/B;IAEA,OAAON,SAAS;EAClB,CAAC;;EAED;EACA,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAACuB,qBAAqB,CAAC,CAAC,CAAC;;EAEjE;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAM0B,UAAU,GAAGA,CAAA,KAAM;IACvBD,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMG,eAAe,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;IACtCP,WAAW,CAAEQ,YAAY,KAAM;MAC7B,GAAGA,YAAY;MACf,CAACF,IAAI,GAAG;QACN,GAAGE,YAAY,CAACF,IAAI,CAAC;QACrB,CAACC,IAAI,GAAG,CAACC,YAAY,CAACF,IAAI,CAAC,CAACC,IAAI;MAClC;IACF,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,SAASE,yBAAyBA,CAAA,EAAG;IACnC,MAAMlB,SAAS,GAAGJ,iBAAiB,CAAC,CAAC;IACrC,MAAMuB,eAAe,GAAG,CAAC,CAAC;IAE1BxB,aAAa,CAACyB,KAAK,CAACC,OAAO,CAACC,IAAI,IAAI;MAClC,MAAM,CAACC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,MAAM,CAAC,GAAGL,IAAI;MAC7C,MAAMP,IAAI,GAAG,IAAIa,IAAI,CAACL,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAEC,GAAG,CAAC;MAC3C,MAAMI,aAAa,GAAGd,IAAI,CAACe,kBAAkB,CAAC,OAAO,CAAC;MACtD,MAAMC,aAAa,GAAI,GAAEL,IAAI,GAAG,EAAE,GAAG,GAAG,GAAG,EAAG,GAAEA,IAAK,IAAGC,MAAM,KAAK,CAAC,GAAG,IAAI,GAAGA,MAAO,EAAC;MAEtF,IAAI,CAACR,eAAe,CAACU,aAAa,CAAC,EAAE;QACnCV,eAAe,CAACU,aAAa,CAAC,GAAG,CAAC,CAAC;MACrC;MAEA,IAAI7B,SAAS,CAACgC,QAAQ,CAACD,aAAa,CAAC,EAAE;QACrCZ,eAAe,CAACU,aAAa,CAAC,CAACE,aAAa,CAAC,GAAG,IAAI;MACtD;IACF,CAAC,CAAC;IAEF,OAAOZ,eAAe;EACxB;EAEA/B,SAAS,CAAC,MAAM;IACdqB,WAAW,CAACS,yBAAyB,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMR,qBAAqB,GAAGA,CAAA,KAAM;IAClC,MAAMuB,SAAS,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,KAAK;MACxD,MAAMC,KAAK,GAAG,IAAIX,IAAI,CAAC,CAAC;MACxB,MAAMb,IAAI,GAAG,IAAIa,IAAI,CAACW,KAAK,CAAC;MAC5BxB,IAAI,CAACyB,OAAO,CAACzB,IAAI,CAAC0B,OAAO,CAAC,CAAC,GAAGH,KAAK,CAAC;MACpC,OAAOvB,IAAI,CAACe,kBAAkB,CAAC,OAAO,CAAC;IACzC,CAAC,CAAC;IAEF,MAAM9B,SAAS,GAAGJ,iBAAiB,CAAC,CAAC;IAErC,MAAM8C,aAAa,GAAGT,SAAS,CAACU,MAAM,CAAC,CAACC,GAAG,EAAE7B,IAAI,KAAK;MACpD6B,GAAG,CAAC7B,IAAI,CAAC,GAAGf,SAAS,CAAC2C,MAAM,CAAC,CAACE,IAAI,EAAE7B,IAAI,KAAK;QAC3C6B,IAAI,CAAC7B,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;QACpB,OAAO6B,IAAI;MACb,CAAC,EAAE,CAAC,CAAC,CAAC;MACN,OAAOD,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,OAAOF,aAAa;EACtB,CAAC;EAED,MAAMI,YAAY,GAAGA,CAAA,KAAM;IACzBrC,WAAW,CAACC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;IACtCE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;EACtB,CAAC;;EAED;EACA,MAAMmC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BC,KAAK,CAAC,oBAAoB,CAAC;;IAE3B;IACA;IACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IAEzDtC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;EACvB,CAAC;EAED,oBACEpB,OAAA;IAAK4D,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClC7D,OAAA,CAACF,MAAM;MAAAgE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVjE,OAAA;MAAK4D,SAAS,EAAE,mBAAmB;MAAAC,QAAA,gBACjC7D,OAAA,CAACH,UAAU;QAAAiE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACdjE,OAAA;QAAK4D,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3B7D,OAAA;UAAA6D,QAAA,EAAI;QAAoB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7BjE,OAAA;UAAO4D,SAAS,EAAC,iCAAiC;UAAAC,QAAA,gBAChD7D,OAAA;YAAA6D,QAAA,eACE7D,OAAA;cAAA6D,QAAA,gBACE7D,OAAA;gBAAA8D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,EACR7D,iBAAiB,CAAC,CAAC,CAAC8D,GAAG,CAAC1C,IAAI,iBAC3BxB,OAAA;gBAAA6D,QAAA,EAAgBrC;cAAI,GAAXA,IAAI;gBAAAsC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAY,CAC1B,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACRjE,OAAA;YAAA6D,QAAA,EACGM,MAAM,CAACC,OAAO,CAACpD,QAAQ,CAAC,CAACkD,GAAG,CAAC,CAAC,CAAC3C,IAAI,EAAE8C,SAAS,CAAC,kBAC9CrE,OAAA;cAAA6D,QAAA,gBACE7D,OAAA;gBAAIsE,KAAK,EAAC,KAAK;gBAAAT,QAAA,EAAEtC;cAAI;gBAAAuC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,EAC1BE,MAAM,CAACC,OAAO,CAACC,SAAS,CAAC,CAACH,GAAG,CAAC,CAAC,CAAC1C,IAAI,EAAE+C,SAAS,CAAC,kBAC/CvE,OAAA;gBAEE4D,SAAS,EACPW,SAAS,GAAG,qCAAqC,GAAG,iBACrD;gBACDC,OAAO,EAAEA,CAAA,KAAOrD,SAAS,GAAGG,eAAe,CAACC,IAAI,EAAEC,IAAI,CAAC,GAAG,IAAM;gBAAAqC,QAAA,EAE/D1C,SAAS,GAAG,EAAE,GAAGK;cAAI,GANhB,GAAED,IAAK,IAAGC,IAAK,EAAC;gBAAAsC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAOpB,CACL,CAAC;YAAA,GAZK1C,IAAI;cAAAuC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAaT,CACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAERjE,OAAA;UAAQyE,IAAI,EAAC,QAAQ;UAACb,SAAS,EAAC,+BAA+B;UAACY,OAAO,EAAEnD,UAAW;UAAAwC,QAAA,EACjF1C,SAAS,GAAG,aAAa,GAAG;QAAe;UAAA2C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtC,CAAC,EACR9C,SAAS,gBACRnB,OAAA;UAAQyE,IAAI,EAAC,QAAQ;UAACb,SAAS,EAAC,+BAA+B;UAACY,OAAO,EAAEjB,YAAa;UAAAM,QAAA,EAAC;QAEvF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,gBAETjE,OAAA;UAAQyE,IAAI,EAAC,QAAQ;UAACb,SAAS,EAAC,gCAAgC;UAACY,OAAO,EAAElB,YAAa;UAAAO,QAAA,EAAC;QAExF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC/D,EAAA,CAvKuBD,cAAc;AAAAyE,EAAA,GAAdzE,cAAc;AAAA,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}