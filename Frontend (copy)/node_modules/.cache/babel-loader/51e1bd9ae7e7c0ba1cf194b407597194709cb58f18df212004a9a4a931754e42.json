{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  // Define dummy schedule data\n  const dummySchedule = {\n    \"slots\": [[2024, 4, 5, 11, 15], [2024, 4, 6, 15, 45], [2024, 4, 7, 15, 0], [2024, 4, 6, 15, 45], [2024, 4, 5, 15, 0]],\n    \"appointments\": [{\n      id: 1,\n      date: [2024, 4, 5],\n      time: '09:00',\n      patientName: 'John Doe'\n    }, {\n      id: 2,\n      date: [2024, 4, 6],\n      time: '10:30',\n      patientName: 'somebody someone'\n    }, {\n      id: 3,\n      date: [2024, 4, 7],\n      time: '11:15',\n      patientName: 'Alice Smith'\n    }, {\n      id: 4,\n      date: [2024, 4, 8],\n      time: '12:00',\n      patientName: 'Bob Johnson'\n    }, {\n      id: 5,\n      date: [2024, 4, 6],\n      time: '09:00',\n      patientName: 'John Doe'\n    }]\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    setSchedule(dummySchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    const updatedSchedule = [...schedule];\n    const cellValue = updatedSchedule[dateIndex].availability[timeIndex];\n    if (isEditing && cellValue !== 'booked') {\n      updatedSchedule[dateIndex].availability[timeIndex] = cellValue === 'available' ? 'busy' : 'available';\n      setSchedule(updatedSchedule);\n    }\n  };\n\n  // Function to generate schedule rows\n  const generateScheduleRows = () => {\n    return schedule.slots.map((slot, index) => {\n      const slotTime = `${slot[3]}:${slot[4] === 0 ? '00' : slot[4]}`;\n      const availability = isSlotBooked(slot) ? 'booked' : 'available';\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          scope: \"row\",\n          children: slotTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), schedule.slots.map((_, columnIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n          className: getClassForAvailability(availability),\n          onClick: () => handleCellClick(index, columnIndex)\n        }, `${index}-${columnIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Function to check if a slot is booked\n  const isSlotBooked = slot => {\n    const slotDate = new Date(slot[0], slot[1] - 1, slot[2]);\n    for (const appointment of schedule.appointments) {\n      const appointmentDate = new Date(appointment.date[0], appointment.date[1] - 1, appointment.date[2]);\n      if (appointmentDate.getTime() === slotDate.getTime()) {\n        const appointmentTime = appointment.time.split(':');\n        const appointmentHour = parseInt(appointmentTime[0]);\n        const appointmentMinute = parseInt(appointmentTime[1]);\n        if (slot[3] === appointmentHour && slot[4] === appointmentMinute) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = availability => {\n    switch (availability) {\n      case 'available':\n        return 'table-success bg-success text-white';\n      case 'booked':\n        return 'table-danger bg-danger text-dark';\n      case 'busy':\n        return 'table-secondary bg-secondary text-white';\n      default:\n        return '';\n    }\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box khus\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 17\n              }, this), schedule.slots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: `${slot[3]}:${slot[4] === 0 ? '00' : slot[4]}`\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: generateScheduleRows()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleEdit,\n          children: isEditing ? 'Cancel Edit' : 'Edit Schedule'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"++4b96eULKbdgzoKDSJcjB7i644=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","useEffect","SideNavbar","Navbar","jsxDEV","_jsxDEV","UploadSchedule","_s","dummySchedule","id","date","time","patientName","schedule","setSchedule","isEditing","setIsEditing","handleEdit","handleCellClick","dateIndex","timeIndex","updatedSchedule","cellValue","availability","generateScheduleRows","slots","map","slot","index","slotTime","isSlotBooked","children","scope","fileName","_jsxFileName","lineNumber","columnNumber","_","columnIndex","className","getClassForAvailability","onClick","slotDate","Date","appointment","appointments","appointmentDate","getTime","appointmentTime","split","appointmentHour","parseInt","appointmentMinute","handleSubmit","alert","Promise","resolve","setTimeout","type","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\n\nexport default function UploadSchedule() {\n  // Define dummy schedule data\n  const dummySchedule = {\n    \"slots\": [\n      [2024, 4, 5, 11, 15],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 7, 15, 0],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 5, 15, 0]\n    ],\n    \"appointments\": [\n      { id: 1, date: [2024, 4, 5], time: '09:00', patientName: 'John Doe' },\n      { id: 2, date: [2024, 4, 6], time: '10:30', patientName: 'somebody someone' },\n      { id: 3, date: [2024, 4, 7], time: '11:15', patientName: 'Alice Smith' },\n      { id: 4, date: [2024, 4, 8], time: '12:00', patientName: 'Bob Johnson' },\n      { id: 5, date: [2024, 4, 6], time: '09:00', patientName: 'John Doe' },\n    ]\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    setSchedule(dummySchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    const updatedSchedule = [...schedule];\n    const cellValue = updatedSchedule[dateIndex].availability[timeIndex];\n\n    if (isEditing && cellValue !== 'booked') {\n      updatedSchedule[dateIndex].availability[timeIndex] =\n        cellValue === 'available' ? 'busy' : 'available';\n      setSchedule(updatedSchedule);\n    }\n  };\n\n  // Function to generate schedule rows\n  const generateScheduleRows = () => {\n    return schedule.slots.map((slot, index) => {\n      const slotTime = `${slot[3]}:${slot[4] === 0 ? '00' : slot[4]}`;\n      const availability = isSlotBooked(slot) ? 'booked' : 'available';\n      return (\n        <tr key={index}>\n          <th scope=\"row\">{slotTime}</th>\n          {schedule.slots.map((_, columnIndex) => (\n            <td\n              key={`${index}-${columnIndex}`}\n              className={getClassForAvailability(availability)}\n              onClick={() => handleCellClick(index, columnIndex)}\n            ></td>\n          ))}\n        </tr>\n      );\n    });\n  };\n\n  // Function to check if a slot is booked\n  const isSlotBooked = (slot) => {\n    const slotDate = new Date(slot[0], slot[1] - 1, slot[2]);\n    for (const appointment of schedule.appointments) {\n      const appointmentDate = new Date(appointment.date[0], appointment.date[1] - 1, appointment.date[2]);\n      if (appointmentDate.getTime() === slotDate.getTime()) {\n        const appointmentTime = appointment.time.split(':');\n        const appointmentHour = parseInt(appointmentTime[0]);\n        const appointmentMinute = parseInt(appointmentTime[1]);\n        if (slot[3] === appointmentHour && slot[4] === appointmentMinute) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = (availability) => {\n    switch (availability) {\n      case 'available':\n        return 'table-success bg-success text-white';\n      case 'booked':\n        return 'table-danger bg-danger text-dark';\n      case 'busy':\n        return 'table-secondary bg-secondary text-white';\n      default:\n        return '';\n    }\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className='dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This week's Schedule</h2>\n          <table className=\"table table-bordered custom-box khus\">\n            <thead>\n              <tr>\n                <th></th>\n                {schedule.slots.map((slot, index) => (\n                  <th key={index}>{`${slot[3]}:${slot[4] === 0 ? '00' : slot[4]}`}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {generateScheduleRows()}\n            </tbody>\n          </table>\n\n          <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleEdit}>\n            {isEditing ? 'Cancel Edit' : 'Edit Schedule'}\n          </button>\n          {isEditing && (\n            <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleSubmit}>\n              Submit\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}