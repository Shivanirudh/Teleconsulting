{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend/src/Pages/meeting.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n// Import your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VideoCall = () => {\n  _s();\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStream, setRemoteStream] = useState(null);\n  const [isCalling, setIsCalling] = useState(false);\n  const [callId, setCallId] = useState(null); // Track call ID for future enhancements\n\n  // Handle user media access\n  const getUserMedia = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      setLocalStream(stream);\n    } catch (error) {\n      console.error('Error accessing user media:', error);\n    }\n  };\n\n  // Initiate the call (replace with your actual calling logic)\n  const initiateCall = async () => {\n    setIsCalling(true);\n\n    // Simulate generating a call ID (replace with actual API or DB call)\n    const generatedCallId = 'unique-call-id';\n    setCallId(generatedCallId);\n\n    // Simulate connecting to the other participant (replace with actual signaling)\n    // ... (code to connect to the other participant using callId)\n\n    // Replace with code to receive and display the remote stream\n    // setRemoteStream(remoteStreamFromOtherParticipant);\n  };\n\n  // Handle ending the call (replace with your actual call termination logic)\n  const endCall = async () => {\n    setIsCalling(false);\n    setRemoteStream(null);\n\n    // Simulate disconnecting from the other participant (replace with actual signaling)\n    // ... (code to disconnect from the other participant)\n\n    // Stop the local stream\n    localStream === null || localStream === void 0 ? void 0 : localStream.getTracks().forEach(track => track.stop());\n  };\n\n  // Handle component unmount to clean up resources\n  useEffect(() => {\n    return () => {\n      if (localStream) {\n        localStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [localStream]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-call-container\",\n    children: isCalling ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"remote-video-container\",\n        children: [remoteStream && /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoEl => videoEl.srcObject = remoteStream,\n          autoPlay: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this), !remoteStream && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Waiting for call to connect...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"local-video-container\",\n        children: localStream && /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoEl => videoEl.srcObject = localStream,\n          autoPlay: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"call-button\",\n        onClick: endCall,\n        children: \"End Call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"call-button\",\n        onClick: initiateCall,\n        children: \"Start Call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), !localStream && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"request-camera-button\",\n        onClick: getUserMedia,\n        children: \"Allow Camera Access\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCall, \"aZ99TXJLuMKalIhVq1z+RTwsaWg=\");\n_c = VideoCall;\nexport default VideoCall;\nvar _c;\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","VideoCall","_s","localStream","setLocalStream","remoteStream","setRemoteStream","isCalling","setIsCalling","callId","setCallId","getUserMedia","stream","navigator","mediaDevices","video","audio","error","console","initiateCall","generatedCallId","endCall","getTracks","forEach","track","stop","className","children","ref","videoEl","srcObject","autoPlay","muted","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend/src/Pages/meeting.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n // Import your CSS file\n\nconst VideoCall = () => {\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStream, setRemoteStream] = useState(null);\n  const [isCalling, setIsCalling] = useState(false);\n  const [callId, setCallId] = useState(null); // Track call ID for future enhancements\n\n  // Handle user media access\n  const getUserMedia = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true,\n      });\n      setLocalStream(stream);\n    } catch (error) {\n      console.error('Error accessing user media:', error);\n    }\n  };\n\n  // Initiate the call (replace with your actual calling logic)\n  const initiateCall = async () => {\n    setIsCalling(true);\n\n    // Simulate generating a call ID (replace with actual API or DB call)\n    const generatedCallId = 'unique-call-id';\n    setCallId(generatedCallId);\n\n    // Simulate connecting to the other participant (replace with actual signaling)\n    // ... (code to connect to the other participant using callId)\n\n    // Replace with code to receive and display the remote stream\n    // setRemoteStream(remoteStreamFromOtherParticipant);\n  };\n\n  // Handle ending the call (replace with your actual call termination logic)\n  const endCall = async () => {\n    setIsCalling(false);\n    setRemoteStream(null);\n\n    // Simulate disconnecting from the other participant (replace with actual signaling)\n    // ... (code to disconnect from the other participant)\n\n    // Stop the local stream\n    localStream?.getTracks().forEach((track) => track.stop());\n  };\n\n  // Handle component unmount to clean up resources\n  useEffect(() => {\n    return () => {\n      if (localStream) {\n        localStream.getTracks().forEach((track) => track.stop());\n      }\n    };\n  }, [localStream]);\n\n  return (\n    <div className=\"video-call-container\">\n      {isCalling ? (\n        <>\n          {/* Display remote stream */}\n          <div className=\"remote-video-container\">\n            {remoteStream && (\n              <video\n                ref={(videoEl) => (videoEl.srcObject = remoteStream)}\n                autoPlay\n                muted\n              />\n            )}\n            {/* Indicate no remote stream available (optional) */}\n            {!remoteStream && <p>Waiting for call to connect...</p>}\n          </div>\n\n          {/* Display local stream */}\n          <div className=\"local-video-container\">\n            {localStream && (\n              <video ref={(videoEl) => (videoEl.srcObject = localStream)} autoPlay />\n            )}\n          </div>\n\n          {/* Call controls */}\n          <button className=\"call-button\" onClick={endCall}>\n            End Call\n          </button>\n        </>\n      ) : (\n        <>\n          {/* Call initiation button */}\n          <button className=\"call-button\" onClick={initiateCall}>\n            Start Call\n          </button>\n\n          {/* Camera permission request (optional) */}\n          {!localStream && (\n            <button className=\"request-camera-button\" onClick={getUserMedia}>\n              Allow Camera Access\n            </button>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default VideoCall;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}