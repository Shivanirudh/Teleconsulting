{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  const getNextDates = () => {\n    const today = new Date();\n    const dates = [];\n    for (let i = 0; i < 7; i++) {\n      const nextDate = new Date(today);\n      nextDate.setDate(today.getDate() + i);\n      dates.push(nextDate.toISOString().split('T')[0]);\n    }\n    return dates;\n  };\n  // Define dummy schedule data\n  const dummySchedule = {\n    \"slots\": [[2024, 4, 5, 11, 15], [2024, 4, 6, 15, 45], [2024, 4, 7, 15, 0], [2024, 4, 2, 15, 45], [2024, 4, 5, 15, 0]],\n    \"appointments\": [{\n      id: 1,\n      date: getNextDates()[0],\n      time: '09:00',\n      patientName: 'John Doe'\n    }, {\n      id: 2,\n      date: getNextDates()[4],\n      time: '10:30',\n      patientName: 'somebody someone'\n    }, {\n      id: 3,\n      date: getNextDates()[1],\n      time: '11:15',\n      patientName: 'Alice Smith'\n    }, {\n      id: 4,\n      date: getNextDates()[3],\n      time: '12:00',\n      patientName: 'Bob Johnson'\n    }, {\n      id: 5,\n      date: getNextDates()[5],\n      time: '09:00',\n      patientName: 'John Doe'\n    }]\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    setSchedule(dummySchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    // Add logic to handle cell click if needed\n  };\n  const generateScheduleRows = () => {\n    const timeSlots = generateTimeSlots();\n    const slots = dummySchedule.slots.map(slot => {\n      const [year, month, day, hour, minute] = slot;\n      return new Date(year, month - 1, day, hour, minute).toISOString();\n    });\n    return slots.map((date, dateIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        scope: \"row\",\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), timeSlots.map((time, timeIndex) => {\n        const availability = checkAvailability(date, time);\n        return /*#__PURE__*/_jsxDEV(\"td\", {\n          className: getClassForAvailability(availability),\n          onClick: () => handleCellClick(dateIndex, timeIndex)\n        }, `${date}-${timeIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this);\n      })]\n    }, date, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this));\n  };\n  const generateTimeSlots = () => {\n    const timeSlots = [];\n    let hour = 9;\n    let minute = 0;\n    while (hour < 16 || hour === 16 && minute === 0) {\n      timeSlots.push(`${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`);\n      minute += 45;\n      if (minute === 60) {\n        hour++;\n        minute = 0;\n      }\n    }\n    return timeSlots;\n  };\n  const checkAvailability = (date, time) => {\n    const appointment = dummySchedule.appointments.find(appt => appt.date === date && appt.time === time);\n    if (appointment) {\n      return 'booked';\n    }\n    const slot = new Date(date).toISOString().split('T')[1].substring(0, 5);\n    if (dummySchedule.slots.find(slotItem => slotItem[3] === parseInt(slot.split(':')[0]) && slotItem[4] === parseInt(slot.split(':')[1]))) {\n      return 'available';\n    }\n    return 'busy';\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = availability => {\n    switch (availability) {\n      case 'available':\n        return 'table-success bg-success text-white';\n      case 'booked':\n        return 'table-danger bg-danger text-dark';\n      case 'busy':\n        return 'table-secondary bg-secondary text-white';\n      default:\n        return '';\n    }\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box khus\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 17\n              }, this), generateTimeSlots().map((time, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: time\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: generateScheduleRows()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleEdit,\n          children: isEditing ? 'Cancel Edit' : 'Edit Schedule'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"++4b96eULKbdgzoKDSJcjB7i644=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","useEffect","SideNavbar","Navbar","jsxDEV","_jsxDEV","UploadSchedule","_s","getNextDates","today","Date","dates","i","nextDate","setDate","getDate","push","toISOString","split","dummySchedule","id","date","time","patientName","schedule","setSchedule","isEditing","setIsEditing","handleEdit","handleCellClick","dateIndex","timeIndex","generateScheduleRows","timeSlots","generateTimeSlots","slots","map","slot","year","month","day","hour","minute","children","scope","fileName","_jsxFileName","lineNumber","columnNumber","availability","checkAvailability","className","getClassForAvailability","onClick","toString","padStart","appointment","appointments","find","appt","substring","slotItem","parseInt","handleSubmit","alert","Promise","resolve","setTimeout","index","type","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\n\nexport default function UploadSchedule() {\n  const getNextDates = () => {\n    const today = new Date();\n    const dates = [];\n\n    for (let i = 0; i < 7; i++) {\n      const nextDate = new Date(today);\n      nextDate.setDate(today.getDate() + i);\n      dates.push(nextDate.toISOString().split('T')[0]);\n    }\n\n    return dates;\n  };\n  // Define dummy schedule data\n  const dummySchedule = {\n    \"slots\": [\n      [2024, 4, 5, 11, 15],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 7, 15, 0],\n      [2024, 4, 2, 15, 45],\n      [2024, 4, 5, 15, 0]\n    ],\n    \"appointments\": [\n      { id: 1, date: getNextDates()[0], time: '09:00', patientName: 'John Doe' },\n      { id: 2, date: getNextDates()[4], time: '10:30', patientName: 'somebody someone' },\n      { id: 3, date: getNextDates()[1], time: '11:15', patientName: 'Alice Smith' },\n      { id: 4, date: getNextDates()[3], time: '12:00', patientName: 'Bob Johnson' },\n      { id: 5, date: getNextDates()[5], time: '09:00', patientName: 'John Doe' }\n    ]\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    setSchedule(dummySchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    // Add logic to handle cell click if needed\n  };\n\n  const generateScheduleRows = () => {\n    const timeSlots = generateTimeSlots();\n    const slots = dummySchedule.slots.map(slot => {\n      const [year, month, day, hour, minute] = slot;\n      return new Date(year, month - 1, day, hour, minute).toISOString();\n    });\n\n    return slots.map((date, dateIndex) => (\n      <tr key={date}>\n        <th scope=\"row\">{date}</th>\n        {timeSlots.map((time, timeIndex) => {\n          const availability = checkAvailability(date, time);\n          return (\n            <td\n              key={`${date}-${timeIndex}`}\n              className={getClassForAvailability(availability)}\n              onClick={() => handleCellClick(dateIndex, timeIndex)}\n            ></td>\n          );\n        })}\n      </tr>\n    ));\n  };\n\n  const generateTimeSlots = () => {\n    const timeSlots = [];\n    let hour = 9;\n    let minute = 0;\n    while (hour < 16 || (hour === 16 && minute === 0)) {\n      timeSlots.push(`${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`);\n      minute += 45;\n      if (minute === 60) {\n        hour++;\n        minute = 0;\n      }\n    }\n    return timeSlots;\n  };\n\n  const checkAvailability = (date, time) => {\n    const appointment = dummySchedule.appointments.find(appt => appt.date === date && appt.time === time);\n    if (appointment) {\n      return 'booked';\n    }\n    const slot = new Date(date).toISOString().split('T')[1].substring(0, 5);\n    if (dummySchedule.slots.find(slotItem => slotItem[3] === parseInt(slot.split(':')[0]) && slotItem[4] === parseInt(slot.split(':')[1]))) {\n      return 'available';\n    }\n    return 'busy';\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = (availability) => {\n    switch (availability) {\n      case 'available':\n        return 'table-success bg-success text-white';\n      case 'booked':\n        return 'table-danger bg-danger text-dark';\n      case 'busy':\n        return 'table-secondary bg-secondary text-white';\n      default:\n        return '';\n    }\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className='dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This week's Schedule</h2>\n          <table className=\"table table-bordered custom-box khus\">\n            <thead>\n              <tr>\n                <th></th>\n                {generateTimeSlots().map((time, index) => (\n                  <th key={index}>{time}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {generateScheduleRows()}\n            </tbody>\n          </table>\n\n          <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleEdit}>\n            {isEditing ? 'Cancel Edit' : 'Edit Schedule'}\n          </button>\n          {isEditing ? (\n            <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleSubmit}>\n              Submit\n            </button>\n          ) : (\n            <div />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}