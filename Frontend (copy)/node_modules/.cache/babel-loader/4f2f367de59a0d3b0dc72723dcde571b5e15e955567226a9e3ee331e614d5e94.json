{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { addDays, format } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  // Function to generate next 7 dates including current date\n  const generateDates = () => {\n    const today = new Date();\n    const dates = [today];\n    for (let i = 1; i < 7; i++) {\n      dates.push(addDays(today, i));\n    }\n    return dates;\n  };\n\n  // Generate next 7 dates\n  const dates = generateDates();\n\n  // Dummy schedule data (replace with your actual data source)\n  const initialSchedule = dates.reduce((acc, date) => {\n    acc[format(date, 'MM/dd/yyyy')] = {\n      '9:00 AM': true,\n      // Green cell (available)\n      '10:00 AM': false,\n      '11:00 AM': false // Grey cell (unavailable)\n      // Add more timeslots if needed\n    };\n    return acc;\n  }, {});\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState(initialSchedule);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (date, time) => {\n    setSchedule(prevSchedule => ({\n      ...prevSchedule,\n      [date]: {\n        ...prevSchedule[date],\n        [time]: !prevSchedule[date][time]\n      }\n    }));\n  };\n\n  // Function to generate empty schedule (for upload mode)\n  const generateEmptySchedule = () => {\n    const emptySchedule = {};\n    dates.forEach(date => {\n      const formattedDate = format(date, 'MM/dd/yyyy');\n      emptySchedule[formattedDate] = {\n        '9:00 AM': false,\n        '10:00 AM': false,\n        '11:00 AM': false\n        // Add more timeslots if needed\n      };\n    });\n    return emptySchedule;\n  };\n  const handleUpload = () => {\n    setSchedule(generateEmptySchedule()); // Reset schedule to empty for upload\n    setIsEditing(true); // Enable editing mode for upload\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This Week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 17\n              }, this), dates.map((date, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: format(date, 'MM/dd/yyyy')\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: Object.entries(schedule).map(([date, timeslots]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"row\",\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 19\n              }, this), Object.entries(timeslots).map(([time, available]) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: available ? 'table-success bg-success text-white' : 'table-secondary',\n                onClick: () => isEditing ? handleCellClick(date, time) : null,\n                children: isEditing ? '' : time\n              }, `${date}-${time}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 21\n              }, this))]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleEdit,\n          children: isEditing ? 'Cancel Edit' : 'Edit Schedule'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-success custom-button2\",\n          onClick: handleUpload,\n          children: \"Upload New Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"klLcvemYYk3DhyO3trKug4mxpWc=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","SideNavbar","Navbar","addDays","format","jsxDEV","_jsxDEV","UploadSchedule","_s","generateDates","today","Date","dates","i","push","initialSchedule","reduce","acc","date","schedule","setSchedule","isEditing","setIsEditing","handleEdit","handleCellClick","time","prevSchedule","generateEmptySchedule","emptySchedule","forEach","formattedDate","handleUpload","handleSubmit","alert","Promise","resolve","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","Object","entries","timeslots","scope","available","onClick","type","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { addDays, format } from 'date-fns';\n\nexport default function UploadSchedule() {\n  // Function to generate next 7 dates including current date\n  const generateDates = () => {\n    const today = new Date();\n    const dates = [today];\n    for (let i = 1; i < 7; i++) {\n      dates.push(addDays(today, i));\n    }\n    return dates;\n  };\n\n  // Generate next 7 dates\n  const dates = generateDates();\n\n  // Dummy schedule data (replace with your actual data source)\n  const initialSchedule = dates.reduce((acc, date) => {\n    acc[format(date, 'MM/dd/yyyy')] = {\n      '9:00 AM': true, // Green cell (available)\n      '10:00 AM': false,\n      '11:00 AM': false, // Grey cell (unavailable)\n      // Add more timeslots if needed\n    };\n    return acc;\n  }, {});\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState(initialSchedule);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (date, time) => {\n    setSchedule((prevSchedule) => ({\n      ...prevSchedule,\n      [date]: {\n        ...prevSchedule[date],\n        [time]: !prevSchedule[date][time],\n      },\n    }));\n  };\n\n  // Function to generate empty schedule (for upload mode)\n  const generateEmptySchedule = () => {\n    const emptySchedule = {};\n    dates.forEach(date => {\n      const formattedDate = format(date, 'MM/dd/yyyy');\n      emptySchedule[formattedDate] = {\n        '9:00 AM': false,\n        '10:00 AM': false,\n        '11:00 AM': false,\n        // Add more timeslots if needed\n      };\n    });\n    return emptySchedule;\n  };\n\n  const handleUpload = () => {\n    setSchedule(generateEmptySchedule()); // Reset schedule to empty for upload\n    setIsEditing(true); // Enable editing mode for upload\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className= 'dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This Week's Schedule</h2>\n          <table className=\"table table-bordered custom-box\">\n            <thead>\n              <tr>\n                <th></th>\n                {dates.map((date, index) => (\n                  <th key={index}>{format(date, 'MM/dd/yyyy')}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(schedule).map(([date, timeslots]) => (\n                <tr key={date}>\n                  <th scope=\"row\">{date}</th>\n                  {Object.entries(timeslots).map(([time, available]) => (\n                    <td\n                      key={`${date}-${time}`}\n                      className={\n                        available ? 'table-success bg-success text-white' : 'table-secondary'\n                      }\n                      onClick={() => (isEditing ? handleCellClick(date, time) : null)}\n                    >\n                      {isEditing ? '' : time}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n\n          <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleEdit}>\n            {isEditing ? 'Cancel Edit' : 'Edit Schedule'}\n          </button>\n          {isEditing ? (\n            <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleSubmit}>\n              Submit\n            </button>\n          ) : (\n            <button type=\"button\" className=\"btn btn-success custom-button2\" onClick={handleUpload}>\n              Upload New Schedule\n            </button>)}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}