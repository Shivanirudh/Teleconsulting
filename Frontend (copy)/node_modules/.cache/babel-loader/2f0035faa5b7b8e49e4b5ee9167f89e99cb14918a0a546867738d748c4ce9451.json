{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Patient/DoctorList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './../../css/Patient/DoctorList.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DoctorList() {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [hospitals, setHospitals] = useState([]);\n  const [selectedHospital, setSelectedHospital] = useState(null);\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [isBookingMode, setIsBookingMode] = useState(false);\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [lockedSlots, setLockedSlots] = useState([]);\n  const [token, setToken] = useState('');\n  useEffect(() => {\n    const fetchHospitals = async () => {\n      const token = localStorage.getItem('token');\n      setToken(token);\n      try {\n        const response = await fetch('http://localhost:8081/api/v1/patient/view-hospitals', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setHospitals(data);\n        } else {\n          console.error('Failed to fetch hospitals');\n        }\n      } catch (error) {\n        console.error('Error fetching hospitals:', error);\n      }\n    };\n    fetchHospitals();\n  }, []);\n  const handleViewDoctors = async hospitalId => {\n    setSelectedHospital(hospitalId);\n    setSelectedDoctor(null);\n    const hospital = hospitals.find(hospital => hospital.id === hospitalId);\n    if (hospital) {\n      const email = hospital.email; // Extract hospital email\n      try {\n        const response = await axios.get(`http://localhost:8081/api/v1/patient/list-doctors-hospital/${email}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.status === 200) {\n          const doctorsData = response.data;\n          setHospitals(prevHospitals => {\n            return prevHospitals.map(prevHospital => {\n              if (prevHospital.id === hospitalId) {\n                return {\n                  ...prevHospital,\n                  doctors: doctorsData\n                };\n              } else {\n                return prevHospital;\n              }\n            });\n          });\n        } else {\n          console.error(\"Failed to fetch doctors for this hospital\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching doctors for this hospital:\", error);\n      }\n    }\n  };\n  const handleViewSchedule = async (doctor, hospitalId) => {\n    const {\n      doctor_id\n    } = doctor;\n    setSelectedDoctor(doctor_id);\n    setIsBookingMode(false);\n    try {\n      const response = await axios.get(`http://localhost:8081/api/v1/patient/list-doctors-schedule/${doctor_id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 200) {\n        const slotsData = response.data.slots;\n        const formattedSlots = transformSlotsData(slotsData);\n        console.log(formattedSlots); // Log formatted slots\n\n        setHospitals(prevHospitals => {\n          return prevHospitals.map(prevHospital => {\n            if (prevHospital.id === hospitalId) {\n              return {\n                ...prevHospital,\n                doctors: prevHospital.doctors.map(prevDoctor => {\n                  if (prevDoctor.id === doctor_id) {\n                    const updatedDoctor = {\n                      ...prevDoctor,\n                      schedule: {\n                        slots: formattedSlots\n                      }\n                    };\n                    renderAvailability(updatedDoctor.schedule.slots); // Pass formatted slots to renderAvailability\n                    return updatedDoctor;\n                  } else {\n                    return prevDoctor;\n                  }\n                })\n              };\n            } else {\n              return prevHospital;\n            }\n          });\n        });\n      } else {\n        console.error('Failed to fetch doctor schedule');\n      }\n    } catch (error) {\n      console.error('Error fetching doctor schedule:', error);\n    }\n  };\n  const transformSlotsData = slotsData => {\n    const formattedSlots = slotsData.map(slot => {\n      const [year, month, day, hour, minute] = slot;\n      return [year, month, day, hour, minute];\n    });\n    return formattedSlots;\n  };\n  const filteredHospitals = hospitals.filter(hospital => hospital.name.toLowerCase().includes(searchTerm.toLowerCase()));\n  const handleCellClick = (year, month, day, time) => {\n    if (isBookingMode) {\n      const isLocked = lockedSlots.includes(`${year}_${month}_${day}_${time}`);\n      if (!isLocked) {\n        setSelectedSlot({\n          year,\n          month,\n          day,\n          time\n        });\n      }\n    }\n  };\n  const handleLockSlot = () => {\n    if (selectedSlot) {\n      const slotKey = `${selectedSlot.year}_${selectedSlot.month}_${selectedSlot.day}_${selectedSlot.time}`;\n      setLockedSlots([...lockedSlots, slotKey]);\n      setSelectedSlot(null);\n    }\n  };\n  const handleToggleBookingMode = () => {\n    setIsBookingMode(!isBookingMode);\n    setSelectedSlot(null);\n  };\n  const renderAvailability = slotsData => {\n    if (!slotsData) {\n      return null;\n    }\n    const slotsByDate = {};\n    slotsData.forEach(slot => {\n      const [year, month, day, hour, minute] = slot;\n      const dateKey = `${year}-${month}-${day}`;\n      if (!slotsByDate[dateKey]) {\n        slotsByDate[dateKey] = [];\n      }\n      slotsByDate[dateKey].push([hour, minute]);\n    });\n    return Object.entries(slotsByDate).map(([date, slotsForDate]) => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), Array.from({\n          length: 10\n        }, (_, i) => i).map(index => {\n          const hour = Math.floor(index * 0.75) + 9;\n          const minute = index * 45 % 60;\n          const isAvailable = slotsForDate.some(slot => {\n            return slot[0] === hour && slot[1] === minute;\n          });\n          return /*#__PURE__*/_jsxDEV(\"td\", {\n            className: isAvailable ? 'available-new clickable' : 'busy-new',\n            onClick: () => handleCellClick(date, hour, minute),\n            children: isAvailable ? 'Available' : 'Busy'\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this);\n        })]\n      }, date, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doctor-list-container-new\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-form\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by Hospital...\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Available Hospitals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredHospitals.map((hospital, index) => {\n        var _hospital$doctors;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: hospital.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), selectedHospital === hospital.id && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Doctors:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: (_hospital$doctors = hospital.doctors) === null || _hospital$doctors === void 0 ? void 0 : _hospital$doctors.map((doctor, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: doctor.first_name + \" \" + doctor.last_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: doctor.specialization\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 23\n                }, this), selectedDoctor === doctor.id && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"table\", {\n                    className: \"availability-table-new\",\n                    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                          style: {\n                            width: '150px'\n                          },\n                          children: \"Date\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 227,\n                          columnNumber: 33\n                        }, this), Array.from({\n                          length: 10\n                        }, (_, i) => i).map(index => {\n                          const hour = Math.floor(index * 0.75) + 9;\n                          const minute = index * 45 % 60;\n                          return /*#__PURE__*/_jsxDEV(\"th\", {\n                            children: [hour < 10 ? '0' + hour : hour, \":\", minute === 0 ? '00' : minute]\n                          }, index, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 232,\n                            columnNumber: 37\n                          }, this);\n                        })]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 226,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 225,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                      children: doctor.schedule && renderAvailability(doctor.schedule.slots)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 239,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 224,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"doc-list-wala-button-new\",\n                    onClick: handleToggleBookingMode,\n                    children: isBookingMode ? 'Cancel Booking' : 'Book Appointment'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 243,\n                    columnNumber: 27\n                  }, this), selectedSlot && /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"doc-list-wala-button-new\",\n                    onClick: handleLockSlot,\n                    children: \"Lock Slot\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 247,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true), selectedDoctor !== doctor.id && /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"doc-list-wala-button-new busy-new\",\n                  onClick: () => handleViewSchedule(doctor, hospital.id),\n                  children: \"View Schedule\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 23\n                }, this)]\n              }, idx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), selectedHospital !== hospital.id && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"doc-list-wala-button-new\",\n            onClick: () => handleViewDoctors(hospital.id),\n            children: \"View Doctors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorList, \"l2W8JCUyHLlBrSZqJlCV9UTYemg=\");\n_c = DoctorList;\nexport default DoctorList;\nvar _c;\n$RefreshReg$(_c, \"DoctorList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","DoctorList","_s","searchTerm","setSearchTerm","hospitals","setHospitals","selectedHospital","setSelectedHospital","selectedDoctor","setSelectedDoctor","isBookingMode","setIsBookingMode","selectedSlot","setSelectedSlot","lockedSlots","setLockedSlots","token","setToken","fetchHospitals","localStorage","getItem","response","fetch","headers","Authorization","ok","data","json","console","error","handleViewDoctors","hospitalId","hospital","find","id","email","get","status","doctorsData","prevHospitals","map","prevHospital","doctors","handleViewSchedule","doctor","doctor_id","slotsData","slots","formattedSlots","transformSlotsData","log","prevDoctor","updatedDoctor","schedule","renderAvailability","slot","year","month","day","hour","minute","filteredHospitals","filter","name","toLowerCase","includes","handleCellClick","time","isLocked","handleLockSlot","slotKey","handleToggleBookingMode","slotsByDate","forEach","dateKey","push","Object","entries","date","slotsForDate","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","from","length","_","i","index","Math","floor","isAvailable","some","className","onClick","type","placeholder","value","onChange","e","target","style","textAlign","_hospital$doctors","idx","first_name","last_name","specialization","width","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Patient/DoctorList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './../../css/Patient/DoctorList.css';\r\nimport axios from 'axios';\r\n\r\nfunction DoctorList() {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [hospitals, setHospitals] = useState([]);\r\n  const [selectedHospital, setSelectedHospital] = useState(null);\r\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\r\n  const [isBookingMode, setIsBookingMode] = useState(false);\r\n  const [selectedSlot, setSelectedSlot] = useState(null);\r\n  const [lockedSlots, setLockedSlots] = useState([]);\r\n  const [token, setToken] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchHospitals = async () => {\r\n      const token = localStorage.getItem('token');\r\n      setToken(token);\r\n      try {\r\n        const response = await fetch('http://localhost:8081/api/v1/patient/view-hospitals', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setHospitals(data);\r\n        } else {\r\n          console.error('Failed to fetch hospitals');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching hospitals:', error);\r\n      }\r\n    };\r\n\r\n    fetchHospitals();\r\n  }, []);\r\n\r\n  const handleViewDoctors = async (hospitalId) => {\r\n    setSelectedHospital(hospitalId);\r\n    setSelectedDoctor(null);\r\n    const hospital = hospitals.find((hospital) => hospital.id === hospitalId);\r\n    if (hospital) {\r\n      const email = hospital.email; // Extract hospital email\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:8081/api/v1/patient/list-doctors-hospital/${email}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          }\r\n        );\r\n        if (response.status === 200) {\r\n          const doctorsData = response.data;\r\n          setHospitals((prevHospitals) => {\r\n            return prevHospitals.map((prevHospital) => {\r\n              if (prevHospital.id === hospitalId) {\r\n                return { ...prevHospital, doctors: doctorsData };\r\n              } else {\r\n                return prevHospital;\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          console.error(\"Failed to fetch doctors for this hospital\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching doctors for this hospital:\", error);\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleViewSchedule = async (doctor, hospitalId) => {\r\n    const { doctor_id } = doctor;\r\n    setSelectedDoctor(doctor_id);\r\n    setIsBookingMode(false);\r\n  \r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:8081/api/v1/patient/list-doctors-schedule/${doctor_id}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n  \r\n      if (response.status === 200) {\r\n        const slotsData = response.data.slots;\r\n        const formattedSlots = transformSlotsData(slotsData);\r\n        console.log(formattedSlots); // Log formatted slots\r\n\r\n\r\n        setHospitals(prevHospitals => {\r\n          return prevHospitals.map(prevHospital => {\r\n            if (prevHospital.id === hospitalId) {\r\n              return {\r\n                ...prevHospital,\r\n                doctors: prevHospital.doctors.map(prevDoctor => {\r\n                  if (prevDoctor.id === doctor_id) {\r\n                    const updatedDoctor = { ...prevDoctor, schedule: { slots: formattedSlots } };\r\n                    renderAvailability(updatedDoctor.schedule.slots); // Pass formatted slots to renderAvailability\r\n                    return updatedDoctor;\r\n                  } else {\r\n                    return prevDoctor;\r\n                  }\r\n                })\r\n              };\r\n            } else {\r\n              return prevHospital;\r\n            }\r\n          });\r\n        });\r\n      } else {\r\n        console.error('Failed to fetch doctor schedule');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching doctor schedule:', error);\r\n    }\r\n  };\r\n  \r\n  const transformSlotsData = (slotsData) => {\r\n    const formattedSlots = slotsData.map(slot => {\r\n      const [year, month, day, hour, minute] = slot;\r\n      return [year, month, day, hour, minute];\r\n    });\r\n    return formattedSlots;\r\n  };  \r\n  \r\n\r\n  const filteredHospitals = hospitals.filter((hospital) =>\r\n    hospital.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  const handleCellClick = (year, month, day, time) => {\r\n    if (isBookingMode) {\r\n      const isLocked = lockedSlots.includes(`${year}_${month}_${day}_${time}`);\r\n      if (!isLocked) {\r\n        setSelectedSlot({ year, month, day, time });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleLockSlot = () => {\r\n    if (selectedSlot) {\r\n      const slotKey = `${selectedSlot.year}_${selectedSlot.month}_${selectedSlot.day}_${selectedSlot.time}`;\r\n      setLockedSlots([...lockedSlots, slotKey]);\r\n      setSelectedSlot(null);\r\n    }\r\n  };\r\n\r\n  const handleToggleBookingMode = () => {\r\n    setIsBookingMode(!isBookingMode);\r\n    setSelectedSlot(null);\r\n  };\r\n\r\n  const renderAvailability = (slotsData) => {\r\n    if (!slotsData) {\r\n      return null;\r\n    }\r\n  \r\n    const slotsByDate = {};\r\n    slotsData.forEach(slot => {\r\n      const [year, month, day, hour, minute] = slot;\r\n      const dateKey = `${year}-${month}-${day}`;\r\n      if (!slotsByDate[dateKey]) {\r\n        slotsByDate[dateKey] = [];\r\n      }\r\n      slotsByDate[dateKey].push([hour, minute]);\r\n    });\r\n  \r\n    return Object.entries(slotsByDate).map(([date, slotsForDate]) => {\r\n      return (\r\n        <tr key={date}>\r\n          <td>{date}</td>\r\n          {Array.from({ length: 10 }, (_, i) => i).map((index) => {\r\n            const hour = Math.floor(index * 0.75) + 9;\r\n            const minute = (index * 45) % 60;\r\n            const isAvailable = slotsForDate.some(slot => {\r\n              return slot[0] === hour && slot[1] === minute;\r\n            });\r\n            return (\r\n              <td\r\n                key={index}\r\n                className={isAvailable ? 'available-new clickable' : 'busy-new'}\r\n                onClick={() => handleCellClick(date, hour, minute)}\r\n              >\r\n                {isAvailable ? 'Available' : 'Busy'}\r\n              </td>\r\n            );\r\n          })}\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"doctor-list-container-new\">\r\n      <div className=\"search-form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search by Hospital...\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      <h2 style={{ textAlign: 'center' }}>Available Hospitals</h2>\r\n      <ul>\r\n        {filteredHospitals.map((hospital, index) => (\r\n          <li key={index}>\r\n            <h3>{hospital.name}</h3>\r\n            {selectedHospital === hospital.id && (\r\n              <>\r\n                <h4>Doctors:</h4>\r\n                <ul>\r\n                  {hospital.doctors?.map((doctor, idx) => (\r\n                    <li key={idx}>\r\n                      <h5>{doctor.first_name + \" \" + doctor.last_name}</h5>\r\n                      <p>{doctor.specialization}</p>\r\n                      {selectedDoctor === doctor.id && (\r\n                        <>\r\n                          <table className=\"availability-table-new\">\r\n                            <thead>\r\n                              <tr>\r\n                                <th style={{ width: '150px' }}>Date</th>\r\n                                {Array.from({ length: 10 }, (_, i) => i).map((index) => {\r\n                                  const hour = Math.floor(index * 0.75) + 9;\r\n                                  const minute = (index * 45) % 60;\r\n                                  return (\r\n                                    <th key={index}>\r\n                                      {hour < 10 ? '0' + hour : hour}:{minute === 0 ? '00' : minute}\r\n                                    </th>\r\n                                  );\r\n                                })}\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              {doctor.schedule && renderAvailability(doctor.schedule.slots)}\r\n                            </tbody>\r\n                          </table>\r\n                          <button className=\"doc-list-wala-button-new\" onClick={handleToggleBookingMode}>\r\n                            {isBookingMode ? 'Cancel Booking' : 'Book Appointment'}\r\n                          </button>\r\n                          {selectedSlot && (\r\n                            <button className=\"doc-list-wala-button-new\" onClick={handleLockSlot}>\r\n                              Lock Slot\r\n                            </button>\r\n                          )}\r\n                        </>\r\n                      )}\r\n                      {selectedDoctor !== doctor.id && (\r\n                        <button className='doc-list-wala-button-new busy-new' onClick={() => handleViewSchedule(doctor, hospital.id)}>\r\n                          View Schedule\r\n                        </button>\r\n                      )}\r\n                      <br />\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </>\r\n            )}\r\n            {selectedHospital !== hospital.id && (\r\n              <button className=\"doc-list-wala-button-new\" onClick={() => handleViewDoctors(hospital.id)}>\r\n                View Doctors\r\n              </button>\r\n            )}\r\n            <br />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}