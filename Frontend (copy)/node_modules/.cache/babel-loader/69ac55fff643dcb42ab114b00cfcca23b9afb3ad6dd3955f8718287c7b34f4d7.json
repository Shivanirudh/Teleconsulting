{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  // Function to generate date objects for the next 7 days including today\n  const generateNext7Days = () => {\n    const today = new Date();\n    const next7Days = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(today);\n      date.setDate(date.getDate() + i);\n      next7Days.push(date);\n    }\n    return next7Days;\n  };\n\n  // Function to generate time slots from 9:00 to 15:45 with 45 minutes interval\n  const generateTimeSlots = () => {\n    const timeSlots = [];\n    let hour = 9;\n    let minute = 0;\n    while (hour < 16 || hour === 16 && minute === 0) {\n      const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n      timeSlots.push(time);\n      minute += 45;\n      if (minute === 60) {\n        hour++;\n        minute = 0;\n      }\n    }\n    return timeSlots;\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n  useEffect(() => {\n    // Initialize schedule with empty cells\n    const next7Days = generateNext7Days();\n    const timeSlots = generateTimeSlots();\n    const initialSchedule = next7Days.map(date => ({\n      date: date.toLocaleDateString(),\n      availability: timeSlots.map(time => ({\n        time,\n        status: 'empty'\n      })) // Initially all cells are empty\n    }));\n    setSchedule(initialSchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    if (isEditing) {\n      const updatedSchedule = [...schedule];\n      const currentStatus = updatedSchedule[dateIndex].availability[timeIndex].status;\n      const newStatus = currentStatus === 'empty' ? 'available' : 'empty';\n      updatedSchedule[dateIndex].availability[timeIndex].status = newStatus;\n      setSchedule(updatedSchedule);\n    }\n  };\n\n  // Function to generate table rows\n  const generateScheduleRows = () => {\n    return schedule.map((day, dateIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        scope: \"row\",\n        children: day.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), day.availability.map((slot, timeIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n        className: getClassForAvailability(slot.status),\n        onClick: () => handleCellClick(dateIndex, timeIndex)\n      }, `${day.date}-${slot.time}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))]\n    }, day.date, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this));\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = status => {\n    switch (status) {\n      case 'empty':\n        return 'bg-secondary text-white';\n      case 'available':\n        return 'bg-success text-white';\n      case 'booked':\n        return 'bg-danger text-white';\n      default:\n        return '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box khus\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 17\n              }, this), generateTimeSlots().map(time => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: time\n              }, time, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: generateScheduleRows()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleEdit,\n          children: isEditing ? 'Cancel Edit' : 'Edit Schedule'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"++4b96eULKbdgzoKDSJcjB7i644=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","useEffect","SideNavbar","Navbar","jsxDEV","_jsxDEV","UploadSchedule","_s","generateNext7Days","today","Date","next7Days","i","date","setDate","getDate","push","generateTimeSlots","timeSlots","hour","minute","time","toString","padStart","schedule","setSchedule","isEditing","setIsEditing","initialSchedule","map","toLocaleDateString","availability","status","handleEdit","handleCellClick","dateIndex","timeIndex","updatedSchedule","currentStatus","newStatus","generateScheduleRows","day","children","scope","fileName","_jsxFileName","lineNumber","columnNumber","slot","className","getClassForAvailability","onClick","type","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\n\nexport default function UploadSchedule() {\n  // Function to generate date objects for the next 7 days including today\n  const generateNext7Days = () => {\n    const today = new Date();\n    const next7Days = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(today);\n      date.setDate(date.getDate() + i);\n      next7Days.push(date);\n    }\n    return next7Days;\n  };\n\n  // Function to generate time slots from 9:00 to 15:45 with 45 minutes interval\n  const generateTimeSlots = () => {\n    const timeSlots = [];\n    let hour = 9;\n    let minute = 0;\n    while (hour < 16 || (hour === 16 && minute === 0)) {\n      const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n      timeSlots.push(time);\n      minute += 45;\n      if (minute === 60) {\n        hour++;\n        minute = 0;\n      }\n    }\n    return timeSlots;\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  useEffect(() => {\n    // Initialize schedule with empty cells\n    const next7Days = generateNext7Days();\n    const timeSlots = generateTimeSlots();\n    const initialSchedule = next7Days.map(date => ({\n      date: date.toLocaleDateString(),\n      availability: timeSlots.map(time => ({ time, status: 'empty' })) // Initially all cells are empty\n    }));\n    setSchedule(initialSchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    if (isEditing) {\n      const updatedSchedule = [...schedule];\n      const currentStatus = updatedSchedule[dateIndex].availability[timeIndex].status;\n      const newStatus = currentStatus === 'empty' ? 'available' : 'empty';\n      updatedSchedule[dateIndex].availability[timeIndex].status = newStatus;\n      setSchedule(updatedSchedule);\n    }\n  };\n\n  // Function to generate table rows\n  const generateScheduleRows = () => {\n    return schedule.map((day, dateIndex) => (\n      <tr key={day.date}>\n        <th scope=\"row\">{day.date}</th>\n        {day.availability.map((slot, timeIndex) => (\n          <td\n            key={`${day.date}-${slot.time}`}\n            className={getClassForAvailability(slot.status)}\n            onClick={() => handleCellClick(dateIndex, timeIndex)}\n          ></td>\n        ))}\n      </tr>\n    ));\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = (status) => {\n    switch (status) {\n      case 'empty':\n        return 'bg-secondary text-white';\n      case 'available':\n        return 'bg-success text-white';\n      case 'booked':\n        return 'bg-danger text-white';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className= 'dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This week's Schedule</h2>\n          <table className=\"table table-bordered custom-box khus\">\n            <thead>\n              <tr>\n                <th></th>\n                {generateTimeSlots().map(time => (\n                  <th key={time}>{time}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {generateScheduleRows()}\n            </tbody>\n          </table>\n\n          <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleEdit}>\n            {isEditing ? 'Cancel Edit' : 'Edit Schedule'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}