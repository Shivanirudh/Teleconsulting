{"ast":null,"code":"import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom, halfRandom } from \"@tsparticles/engine\";\nconst half = 0.5,\n  sides = 4,\n  double = 2;\nfunction randomSquareCoordinate(position, offset) {\n  return position + offset * (getRandom() - halfRandom);\n}\nexport class EmittersSquareShape extends EmitterShapeBase {\n  constructor(position, size, fill, options) {\n    super(position, size, fill, options);\n  }\n  async init() {}\n  async randomPosition() {\n    return await new Promise(success => {\n      const fill = this.fill,\n        position = this.position,\n        size = this.size;\n      if (fill) {\n        return success({\n          position: {\n            x: randomSquareCoordinate(position.x, size.width),\n            y: randomSquareCoordinate(position.y, size.height)\n          }\n        });\n      } else {\n        const halfW = size.width * half,\n          halfH = size.height * half,\n          side = Math.floor(getRandom() * sides),\n          v = (getRandom() - halfRandom) * double;\n        switch (side) {\n          case 0:\n            return success({\n              position: {\n                x: position.x + v * halfW,\n                y: position.y - halfH\n              }\n            });\n          case 1:\n            return success({\n              position: {\n                x: position.x - halfW,\n                y: position.y + v * halfH\n              }\n            });\n          case 2:\n            return success({\n              position: {\n                x: position.x + v * halfW,\n                y: position.y + halfH\n              }\n            });\n          case 3:\n          default:\n            return success({\n              position: {\n                x: position.x + halfW,\n                y: position.y + v * halfH\n              }\n            });\n        }\n      }\n    });\n  }\n}","map":{"version":3,"names":["EmitterShapeBase","getRandom","halfRandom","half","sides","double","randomSquareCoordinate","position","offset","EmittersSquareShape","constructor","size","fill","options","init","randomPosition","Promise","success","x","width","y","height","halfW","halfH","side","Math","floor","v"],"sources":["/home/aksh2002/Desktop/Teleconsulting/node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShape.js"],"sourcesContent":["import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom, halfRandom } from \"@tsparticles/engine\";\nconst half = 0.5, sides = 4, double = 2;\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - halfRandom);\n}\nexport class EmittersSquareShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    async randomPosition() {\n        return await new Promise((success) => {\n            const fill = this.fill, position = this.position, size = this.size;\n            if (fill) {\n                return success({\n                    position: {\n                        x: randomSquareCoordinate(position.x, size.width),\n                        y: randomSquareCoordinate(position.y, size.height),\n                    },\n                });\n            }\n            else {\n                const halfW = size.width * half, halfH = size.height * half, side = Math.floor(getRandom() * sides), v = (getRandom() - halfRandom) * double;\n                switch (side) {\n                    case 0:\n                        return success({\n                            position: {\n                                x: position.x + v * halfW,\n                                y: position.y - halfH,\n                            },\n                        });\n                    case 1:\n                        return success({\n                            position: {\n                                x: position.x - halfW,\n                                y: position.y + v * halfH,\n                            },\n                        });\n                    case 2:\n                        return success({\n                            position: {\n                                x: position.x + v * halfW,\n                                y: position.y + halfH,\n                            },\n                        });\n                    case 3:\n                    default:\n                        return success({\n                            position: {\n                                x: position.x + halfW,\n                                y: position.y + v * halfH,\n                            },\n                        });\n                }\n            }\n        });\n    }\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,SAAS,EAAEC,UAAU,QAAQ,qBAAqB;AAC3D,MAAMC,IAAI,GAAG,GAAG;EAAEC,KAAK,GAAG,CAAC;EAAEC,MAAM,GAAG,CAAC;AACvC,SAASC,sBAAsBA,CAACC,QAAQ,EAAEC,MAAM,EAAE;EAC9C,OAAOD,QAAQ,GAAGC,MAAM,IAAIP,SAAS,CAAC,CAAC,GAAGC,UAAU,CAAC;AACzD;AACA,OAAO,MAAMO,mBAAmB,SAAST,gBAAgB,CAAC;EACtDU,WAAWA,CAACH,QAAQ,EAAEI,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;IACvC,KAAK,CAACN,QAAQ,EAAEI,IAAI,EAAEC,IAAI,EAAEC,OAAO,CAAC;EACxC;EACA,MAAMC,IAAIA,CAAA,EAAG,CACb;EACA,MAAMC,cAAcA,CAAA,EAAG;IACnB,OAAO,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAClC,MAAML,IAAI,GAAG,IAAI,CAACA,IAAI;QAAEL,QAAQ,GAAG,IAAI,CAACA,QAAQ;QAAEI,IAAI,GAAG,IAAI,CAACA,IAAI;MAClE,IAAIC,IAAI,EAAE;QACN,OAAOK,OAAO,CAAC;UACXV,QAAQ,EAAE;YACNW,CAAC,EAAEZ,sBAAsB,CAACC,QAAQ,CAACW,CAAC,EAAEP,IAAI,CAACQ,KAAK,CAAC;YACjDC,CAAC,EAAEd,sBAAsB,CAACC,QAAQ,CAACa,CAAC,EAAET,IAAI,CAACU,MAAM;UACrD;QACJ,CAAC,CAAC;MACN,CAAC,MACI;QACD,MAAMC,KAAK,GAAGX,IAAI,CAACQ,KAAK,GAAGhB,IAAI;UAAEoB,KAAK,GAAGZ,IAAI,CAACU,MAAM,GAAGlB,IAAI;UAAEqB,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACzB,SAAS,CAAC,CAAC,GAAGG,KAAK,CAAC;UAAEuB,CAAC,GAAG,CAAC1B,SAAS,CAAC,CAAC,GAAGC,UAAU,IAAIG,MAAM;QAC5I,QAAQmB,IAAI;UACR,KAAK,CAAC;YACF,OAAOP,OAAO,CAAC;cACXV,QAAQ,EAAE;gBACNW,CAAC,EAAEX,QAAQ,CAACW,CAAC,GAAGS,CAAC,GAAGL,KAAK;gBACzBF,CAAC,EAAEb,QAAQ,CAACa,CAAC,GAAGG;cACpB;YACJ,CAAC,CAAC;UACN,KAAK,CAAC;YACF,OAAON,OAAO,CAAC;cACXV,QAAQ,EAAE;gBACNW,CAAC,EAAEX,QAAQ,CAACW,CAAC,GAAGI,KAAK;gBACrBF,CAAC,EAAEb,QAAQ,CAACa,CAAC,GAAGO,CAAC,GAAGJ;cACxB;YACJ,CAAC,CAAC;UACN,KAAK,CAAC;YACF,OAAON,OAAO,CAAC;cACXV,QAAQ,EAAE;gBACNW,CAAC,EAAEX,QAAQ,CAACW,CAAC,GAAGS,CAAC,GAAGL,KAAK;gBACzBF,CAAC,EAAEb,QAAQ,CAACa,CAAC,GAAGG;cACpB;YACJ,CAAC,CAAC;UACN,KAAK,CAAC;UACN;YACI,OAAON,OAAO,CAAC;cACXV,QAAQ,EAAE;gBACNW,CAAC,EAAEX,QAAQ,CAACW,CAAC,GAAGI,KAAK;gBACrBF,CAAC,EAAEb,QAAQ,CAACa,CAAC,GAAGO,CAAC,GAAGJ;cACxB;YACJ,CAAC,CAAC;QACV;MACJ;IACJ,CAAC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}