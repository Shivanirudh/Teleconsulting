{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  // Define dummy schedule data\n  const dummySchedule = {\n    \"slots\": [[2024, 4, 5, 11, 15], [2024, 4, 6, 15, 45], [2024, 4, 7, 15, 0], [2024, 4, 6, 15, 45], [2024, 4, 5, 15, 0]]\n  };\n\n  // Function to generate time slots array\n  const generateTimeSlots = () => {\n    let timeSlots = [];\n    for (let i = 9; i < 18; i++) {\n      for (let j = 0; j < 60; j += 45) {\n        const time = `${i}:${j === 0 ? '00' : j}`;\n        timeSlots.push(time);\n      }\n    }\n    return timeSlots;\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    setSchedule(dummySchedule);\n  }, []);\n  const timeSlots = generateTimeSlots();\n  const generateScheduleRows = () => {\n    const today = new Date();\n    const currentDate = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`;\n    const rows = [];\n    for (let i = 0; i < 7; i++) {\n      const currentDateObj = new Date(today);\n      currentDateObj.setDate(today.getDate() + i);\n      const formattedDate = `${currentDateObj.getFullYear()}-${currentDateObj.getMonth() + 1}-${currentDateObj.getDate()}`;\n      rows.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          scope: \"row\",\n          children: formattedDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), timeSlots.map((timeSlot, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n          className: getSlotClass(formattedDate, timeSlot),\n          children: timeSlot\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this))]\n      }, formattedDate, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this));\n    }\n    return rows;\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getSlotClass = (date, timeSlot) => {\n    const slot = dummySchedule.slots.find(slot => {\n      const [year, month, day, hours, minutes] = slot;\n      const slotDate = `${year}-${month}-${day}`;\n      const slotTime = `${hours}:${minutes}`;\n      return slotDate === date && slotTime === timeSlot;\n    });\n    return slot ? 'table-success bg-success text-white' : 'table-secondary bg-secondary text-white';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box khus\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 17\n              }, this), timeSlots.map((timeSlot, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: timeSlot\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: generateScheduleRows()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"ufj6drX7OuS1FJ8vycY2bacy/To=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","useEffect","SideNavbar","Navbar","jsxDEV","_jsxDEV","UploadSchedule","_s","dummySchedule","generateTimeSlots","timeSlots","i","j","time","push","schedule","setSchedule","generateScheduleRows","today","Date","currentDate","getFullYear","getMonth","getDate","rows","currentDateObj","setDate","formattedDate","children","scope","fileName","_jsxFileName","lineNumber","columnNumber","map","timeSlot","index","className","getSlotClass","date","slot","slots","find","year","month","day","hours","minutes","slotDate","slotTime","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\n\nexport default function UploadSchedule() {\n  // Define dummy schedule data\n  const dummySchedule = {\n    \"slots\": [\n      [2024, 4, 5, 11, 15],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 7, 15, 0],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 5, 15, 0]\n    ],\n  };\n\n  // Function to generate time slots array\n  const generateTimeSlots = () => {\n    let timeSlots = [];\n    for (let i = 9; i < 18; i++) {\n      for (let j = 0; j < 60; j += 45) {\n        const time = `${i}:${j === 0 ? '00' : j}`;\n        timeSlots.push(time);\n      }\n    }\n    return timeSlots;\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    setSchedule(dummySchedule);\n  }, []);\n\n  const timeSlots = generateTimeSlots();\n\n  const generateScheduleRows = () => {\n    const today = new Date();\n    const currentDate = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`;\n\n    const rows = [];\n    for (let i = 0; i < 7; i++) {\n      const currentDateObj = new Date(today);\n      currentDateObj.setDate(today.getDate() + i);\n      const formattedDate = `${currentDateObj.getFullYear()}-${currentDateObj.getMonth() + 1}-${currentDateObj.getDate()}`;\n\n      rows.push(\n        <tr key={formattedDate}>\n          <th scope=\"row\">{formattedDate}</th>\n          {timeSlots.map((timeSlot, index) => (\n            <td key={index} className={getSlotClass(formattedDate, timeSlot)}>\n              {timeSlot}\n            </td>\n          ))}\n        </tr>\n      );\n    }\n    return rows;\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getSlotClass = (date, timeSlot) => {\n    const slot = dummySchedule.slots.find(slot => {\n      const [year, month, day, hours, minutes] = slot;\n      const slotDate = `${year}-${month}-${day}`;\n      const slotTime = `${hours}:${minutes}`;\n      return slotDate === date && slotTime === timeSlot;\n    });\n    return slot ? 'table-success bg-success text-white' : 'table-secondary bg-secondary text-white';\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className='dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This week's Schedule</h2>\n          <table className=\"table table-bordered custom-box khus\">\n            <thead>\n              <tr>\n                <th></th>\n                {timeSlots.map((timeSlot, index) => (\n                  <th key={index}>{timeSlot}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {generateScheduleRows()}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}