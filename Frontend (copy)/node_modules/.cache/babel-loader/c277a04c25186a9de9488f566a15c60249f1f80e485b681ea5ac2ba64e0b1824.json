{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  const getNextDates = () => {\n    const today = new Date();\n    const dates = [];\n    for (let i = 0; i < 7; i++) {\n      const nextDate = new Date(today);\n      nextDate.setDate(today.getDate() + i);\n      dates.push(nextDate.toISOString().split('T')[0]);\n    }\n    return dates;\n  };\n  // Define dummy schedule data\n  const dummySchedule = {\n    slots: [[2024, 4, 5, 11, 15], [2024, 4, 6, 15, 45], [2024, 4, 7, 15, 0], [2024, 4, 2, 15, 45], [2024, 4, 5, 15, 0]],\n    appointments: [{\n      id: 1,\n      date: getNextDates()[0],\n      time: '09:00',\n      patientName: 'John Doe'\n    }, {\n      id: 2,\n      date: getNextDates()[4],\n      time: '10:30',\n      patientName: 'somebody someone'\n    }, {\n      id: 3,\n      date: getNextDates()[1],\n      time: '11:15',\n      patientName: 'Alice Smith'\n    }, {\n      id: 4,\n      date: getNextDates()[3],\n      time: '12:00',\n      patientName: 'Bob Johnson'\n    }, {\n      id: 5,\n      date: getNextDates()[5],\n      time: '09:00',\n      patientName: 'John Doe'\n    }]\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState({\n    slots: [],\n    appointments: []\n  });\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    setSchedule(dummySchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    // Add logic to handle cell click, if needed\n  };\n\n  // Function to generate time slots\n  const generateTimeSlots = () => {\n    const slots = [];\n    let startTime = 9;\n    let endTime = 15;\n    let minutes = 0;\n    while (startTime <= endTime) {\n      slots.push(`${startTime.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`);\n      minutes += 45;\n      if (minutes >= 60) {\n        minutes = minutes % 60;\n        startTime += 1;\n      }\n    }\n    return slots;\n  };\n\n  // Function to generate schedule rows\n  const generateScheduleRows = () => {\n    const timeSlots = generateTimeSlots();\n    return schedule.slots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        scope: \"row\",\n        children: `${slot[2]}/${slot[1]}/${slot[0]}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), timeSlots.map((timeSlot, timeIndex) => {\n        const slotTime = `${slot[3].toString().padStart(2, '0')}:${slot[4].toString().padStart(2, '0')}`;\n        const status = getAvailabilityStatus(slotTime);\n        return /*#__PURE__*/_jsxDEV(\"td\", {\n          className: status === 'available' ? 'table-success bg-success text-white' : status === 'booked' ? 'table-danger bg-danger text-dark' : 'table-secondary bg-secondary text-white',\n          onClick: () => handleCellClick(index, timeIndex)\n        }, `${index}-${timeIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this);\n      })]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this));\n  };\n\n  // Function to get availability status\n  const getAvailabilityStatus = time => {\n    const appointment = schedule.appointments.find(app => app.time === time);\n    return appointment ? 'booked' : 'available';\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box khus\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 17\n              }, this), generateTimeSlots().map((timeSlot, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: timeSlot\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: generateScheduleRows()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleEdit,\n          children: isEditing ? 'Cancel Edit' : 'Edit Schedule'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"Z+lK/czXUJxNW32GNSIDuPKVzN8=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","useEffect","SideNavbar","Navbar","jsxDEV","_jsxDEV","UploadSchedule","_s","getNextDates","today","Date","dates","i","nextDate","setDate","getDate","push","toISOString","split","dummySchedule","slots","appointments","id","date","time","patientName","schedule","setSchedule","isEditing","setIsEditing","handleEdit","handleCellClick","dateIndex","timeIndex","generateTimeSlots","startTime","endTime","minutes","toString","padStart","generateScheduleRows","timeSlots","map","slot","index","children","scope","fileName","_jsxFileName","lineNumber","columnNumber","timeSlot","slotTime","status","getAvailabilityStatus","className","onClick","appointment","find","app","handleSubmit","alert","Promise","resolve","setTimeout","type","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\n\nexport default function UploadSchedule() {\n  const getNextDates = () => {\n    const today = new Date();\n    const dates = [];\n\n    for (let i = 0; i < 7; i++) {\n      const nextDate = new Date(today);\n      nextDate.setDate(today.getDate() + i);\n      dates.push(nextDate.toISOString().split('T')[0]);\n    }\n\n    return dates;\n  };\n  // Define dummy schedule data\n  const dummySchedule = {\n    slots: [\n      [2024, 4, 5, 11, 15],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 7, 15, 0],\n      [2024, 4, 2, 15, 45],\n      [2024, 4, 5, 15, 0]\n    ],\n    appointments: [\n      { id:1, date: getNextDates()[0], time: '09:00', patientName: 'John Doe' },\n      { id:2, date: getNextDates()[4], time: '10:30', patientName: 'somebody someone' },\n      { id:3, date: getNextDates()[1], time: '11:15', patientName: 'Alice Smith' },\n      { id:4, date: getNextDates()[3], time: '12:00', patientName: 'Bob Johnson' },\n      { id:5, date: getNextDates()[5], time: '09:00', patientName: 'John Doe' },\n    ]\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState({ slots: [], appointments: [] });\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    setSchedule(dummySchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    // Add logic to handle cell click, if needed\n  };\n\n  // Function to generate time slots\n  const generateTimeSlots = () => {\n    const slots = [];\n    let startTime = 9;\n    let endTime = 15;\n    let minutes = 0;\n\n    while (startTime <= endTime) {\n      slots.push(`${startTime.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`);\n      minutes += 45;\n      if (minutes >= 60) {\n        minutes = minutes % 60;\n        startTime += 1;\n      }\n    }\n\n    return slots;\n  };\n\n  // Function to generate schedule rows\n  const generateScheduleRows = () => {\n    const timeSlots = generateTimeSlots();\n\n    return schedule.slots.map((slot, index) => (\n      <tr key={index}>\n        <th scope=\"row\">{`${slot[2]}/${slot[1]}/${slot[0]}`}</th>\n        {timeSlots.map((timeSlot, timeIndex) => {\n          const slotTime = `${slot[3].toString().padStart(2, '0')}:${slot[4].toString().padStart(2, '0')}`;\n          const status = getAvailabilityStatus(slotTime);\n          return (\n            <td\n              key={`${index}-${timeIndex}`}\n              className={status === 'available' ? 'table-success bg-success text-white' : (status === 'booked' ? 'table-danger bg-danger text-dark' : 'table-secondary bg-secondary text-white')}\n              onClick={() => handleCellClick(index, timeIndex)}\n            ></td>\n          );\n        })}\n      </tr>\n    ));\n  };\n\n  // Function to get availability status\n  const getAvailabilityStatus = (time) => {\n    const appointment = schedule.appointments.find(app => app.time === time);\n    return appointment ? 'booked' : 'available';\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className= 'dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This week's Schedule</h2>\n          <table className=\"table table-bordered custom-box khus\">\n            <thead>\n              <tr>\n                <th></th>\n                {generateTimeSlots().map((timeSlot, index) => (\n                  <th key={index}>{timeSlot}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {generateScheduleRows()}\n            </tbody>\n          </table>\n\n          <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleEdit}>\n            {isEditing ? 'Cancel Edit' : 'Edit Schedule'}\n          </button>\n          {isEditing ? (\n            <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleSubmit}>\n              Submit\n            </button>\n          ) : (\n            <div/>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}