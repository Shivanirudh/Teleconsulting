{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  // Initialize current date\n  const currentDate = new Date();\n\n  // Initialize next seven dates including current date\n  const nextSevenDates = [...Array(7)].map((_, index) => {\n    const date = new Date(currentDate);\n    date.setDate(currentDate.getDate() + index);\n    return date.toISOString().split('T')[0]; // Format date as YYYY-MM-DD\n  });\n\n  // Initialize time slots from 9:00 AM to 6:00 PM with 45 minutes interval\n  const timeSlots = Array.from({\n    length: 10\n  }, (_, index) => {\n    const hour = Math.floor(index / 2) + 9; // Hours from 9 to 18\n    const minute = index % 2 === 0 ? '00' : '45'; // Minutes either '00' or '45'\n    return `${hour}:${minute} ${index < 5 ? 'AM' : 'PM'}`;\n  });\n\n  // Initialize schedule data state\n  const [schedule, setSchedule] = useState({});\n  useEffect(() => {\n    // Dummy schedule data\n    const dummySchedule = {\n      \"slots\": [[currentDate.getFullYear(), currentDate.getMonth() + 1, currentDate.getDate(), 11, 15], [currentDate.getFullYear(), currentDate.getMonth() + 1, currentDate.getDate(), 14, 45], [currentDate.getFullYear(), currentDate.getMonth() + 1, nextSevenDates[3].split('-')[2], 15, 0], [currentDate.getFullYear(), currentDate.getMonth() + 1, nextSevenDates[4].split('-')[2], 15, 45], [currentDate.getFullYear(), currentDate.getMonth() + 1, nextSevenDates[5].split('-')[2], 15, 0]]\n    };\n    setSchedule(dummySchedule);\n  }, []);\n\n  // Function to check if a given time slot is booked\n  const isSlotBooked = (date, time) => {\n    if (!schedule.slots) return false;\n    const [year, month, day, hour, minute] = time;\n    return schedule.slots.some(slot => {\n      const [slotYear, slotMonth, slotDay, slotHour, slotMinute] = slot;\n      return year === slotYear && month === slotMonth && day === slotDay && hour === slotHour && minute === slotMinute;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box khus\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 17\n              }, this), timeSlots.map((timeSlot, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: timeSlot\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: nextSevenDates.map((date, dateIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this), timeSlots.map((timeSlot, timeIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: isSlotBooked(date, [currentDate.getFullYear(), currentDate.getMonth() + 1, parseInt(date.split('-')[2]), parseInt(timeSlot.split(':')[0]), parseInt(timeSlot.split(':')[1].split(' ')[0])]) ? 'table-danger bg-danger text-dark' : ''\n              }, `${date}-${timeSlot}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 21\n              }, this))]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"zqvN6t9A8VKtQQACSFxMv8tIR3M=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","useEffect","SideNavbar","Navbar","jsxDEV","_jsxDEV","UploadSchedule","_s","currentDate","Date","nextSevenDates","Array","map","_","index","date","setDate","getDate","toISOString","split","timeSlots","from","length","hour","Math","floor","minute","schedule","setSchedule","dummySchedule","getFullYear","getMonth","isSlotBooked","time","slots","year","month","day","some","slot","slotYear","slotMonth","slotDay","slotHour","slotMinute","className","children","fileName","_jsxFileName","lineNumber","columnNumber","timeSlot","dateIndex","timeIndex","parseInt","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\n\nexport default function UploadSchedule() {\n  // Initialize current date\n  const currentDate = new Date();\n  \n  // Initialize next seven dates including current date\n  const nextSevenDates = [...Array(7)].map((_, index) => {\n    const date = new Date(currentDate);\n    date.setDate(currentDate.getDate() + index);\n    return date.toISOString().split('T')[0]; // Format date as YYYY-MM-DD\n  });\n\n  // Initialize time slots from 9:00 AM to 6:00 PM with 45 minutes interval\n  const timeSlots = Array.from({ length: 10 }, (_, index) => {\n    const hour = Math.floor(index / 2) + 9; // Hours from 9 to 18\n    const minute = index % 2 === 0 ? '00' : '45'; // Minutes either '00' or '45'\n    return `${hour}:${minute} ${index < 5 ? 'AM' : 'PM'}`;\n  });\n\n  // Initialize schedule data state\n  const [schedule, setSchedule] = useState({});\n\n  useEffect(() => {\n    // Dummy schedule data\n    const dummySchedule = {\n      \"slots\": [\n        [currentDate.getFullYear(), currentDate.getMonth() + 1, currentDate.getDate(), 11, 15],\n        [currentDate.getFullYear(), currentDate.getMonth() + 1, currentDate.getDate(), 14, 45],\n        [currentDate.getFullYear(), currentDate.getMonth() + 1, nextSevenDates[3].split('-')[2], 15, 0],\n        [currentDate.getFullYear(), currentDate.getMonth() + 1, nextSevenDates[4].split('-')[2], 15, 45],\n        [currentDate.getFullYear(), currentDate.getMonth() + 1, nextSevenDates[5].split('-')[2], 15, 0]\n      ]\n    };\n\n    setSchedule(dummySchedule);\n  }, []);\n\n  // Function to check if a given time slot is booked\n  const isSlotBooked = (date, time) => {\n    if (!schedule.slots) return false;\n    const [year, month, day, hour, minute] = time;\n    return schedule.slots.some(slot => {\n      const [slotYear, slotMonth, slotDay, slotHour, slotMinute] = slot;\n      return year === slotYear && month === slotMonth && day === slotDay && hour === slotHour && minute === slotMinute;\n    });\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className= 'dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This week's Schedule</h2>\n          <table className=\"table table-bordered custom-box khus\">\n            <thead>\n              <tr>\n                <th></th>\n                {timeSlots.map((timeSlot, index) => (\n                  <th key={index}>{timeSlot}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {nextSevenDates.map((date, dateIndex) => (\n                <tr key={date}>\n                  <td>{date}</td>\n                  {timeSlots.map((timeSlot, timeIndex) => (\n                    <td\n                      key={`${date}-${timeSlot}`}\n                      className={isSlotBooked(date, [currentDate.getFullYear(), currentDate.getMonth() + 1, parseInt(date.split('-')[2]), parseInt(timeSlot.split(':')[0]), parseInt(timeSlot.split(':')[1].split(' ')[0])]) ? 'table-danger bg-danger text-dark' : ''}\n                    ></td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,sCAAsC,CAAC,CAAC;AAC/C,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,MAAM,MAAM,gCAAgC;AACnD,OAAO,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,eAAe,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACvC;EACA,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;;EAE9B;EACA,MAAMC,cAAc,GAAG,CAAC,GAAGC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAK;IACrD,MAAMC,IAAI,GAAG,IAAIN,IAAI,CAACD,WAAW,CAAC;IAClCO,IAAI,CAACC,OAAO,CAACR,WAAW,CAACS,OAAO,CAAC,CAAC,GAAGH,KAAK,CAAC;IAC3C,OAAOC,IAAI,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3C,CAAC,CAAC;;EAEF;EACA,MAAMC,SAAS,GAAGT,KAAK,CAACU,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAG,CAAC,EAAE,CAACT,CAAC,EAAEC,KAAK,KAAK;IACzD,MAAMS,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACX,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACxC,MAAMY,MAAM,GAAGZ,KAAK,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;IAC9C,OAAQ,GAAES,IAAK,IAAGG,MAAO,IAAGZ,KAAK,GAAG,CAAC,GAAG,IAAI,GAAG,IAAK,EAAC;EACvD,CAAC,CAAC;;EAEF;EACA,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAG5B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAM4B,aAAa,GAAG;MACpB,OAAO,EAAE,CACP,CAACrB,WAAW,CAACsB,WAAW,CAAC,CAAC,EAAEtB,WAAW,CAACuB,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAEvB,WAAW,CAACS,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACtF,CAACT,WAAW,CAACsB,WAAW,CAAC,CAAC,EAAEtB,WAAW,CAACuB,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAEvB,WAAW,CAACS,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACtF,CAACT,WAAW,CAACsB,WAAW,CAAC,CAAC,EAAEtB,WAAW,CAACuB,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAErB,cAAc,CAAC,CAAC,CAAC,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAC/F,CAACX,WAAW,CAACsB,WAAW,CAAC,CAAC,EAAEtB,WAAW,CAACuB,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAErB,cAAc,CAAC,CAAC,CAAC,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAChG,CAACX,WAAW,CAACsB,WAAW,CAAC,CAAC,EAAEtB,WAAW,CAACuB,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAErB,cAAc,CAAC,CAAC,CAAC,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAEnG,CAAC;IAEDS,WAAW,CAACC,aAAa,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,YAAY,GAAGA,CAACjB,IAAI,EAAEkB,IAAI,KAAK;IACnC,IAAI,CAACN,QAAQ,CAACO,KAAK,EAAE,OAAO,KAAK;IACjC,MAAM,CAACC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEd,IAAI,EAAEG,MAAM,CAAC,GAAGO,IAAI;IAC7C,OAAON,QAAQ,CAACO,KAAK,CAACI,IAAI,CAACC,IAAI,IAAI;MACjC,MAAM,CAACC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,CAAC,GAAGL,IAAI;MACjE,OAAOJ,IAAI,KAAKK,QAAQ,IAAIJ,KAAK,KAAKK,SAAS,IAAIJ,GAAG,KAAKK,OAAO,IAAInB,IAAI,KAAKoB,QAAQ,IAAIjB,MAAM,KAAKkB,UAAU;IAClH,CAAC,CAAC;EACJ,CAAC;EAED,oBACEvC,OAAA;IAAKwC,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClCzC,OAAA,CAACF,MAAM;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV7C,OAAA;MAAKwC,SAAS,EAAE,mBAAmB;MAAAC,QAAA,gBACjCzC,OAAA,CAACH,UAAU;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACd7C,OAAA;QAAKwC,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3BzC,OAAA;UAAAyC,QAAA,EAAI;QAAoB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7B7C,OAAA;UAAOwC,SAAS,EAAC,sCAAsC;UAAAC,QAAA,gBACrDzC,OAAA;YAAAyC,QAAA,eACEzC,OAAA;cAAAyC,QAAA,gBACEzC,OAAA;gBAAA0C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,EACR9B,SAAS,CAACR,GAAG,CAAC,CAACuC,QAAQ,EAAErC,KAAK,kBAC7BT,OAAA;gBAAAyC,QAAA,EAAiBK;cAAQ,GAAhBrC,KAAK;gBAAAiC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAgB,CAC/B,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACR7C,OAAA;YAAAyC,QAAA,EACGpC,cAAc,CAACE,GAAG,CAAC,CAACG,IAAI,EAAEqC,SAAS,kBAClC/C,OAAA;cAAAyC,QAAA,gBACEzC,OAAA;gBAAAyC,QAAA,EAAK/B;cAAI;gBAAAgC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,EACd9B,SAAS,CAACR,GAAG,CAAC,CAACuC,QAAQ,EAAEE,SAAS,kBACjChD,OAAA;gBAEEwC,SAAS,EAAEb,YAAY,CAACjB,IAAI,EAAE,CAACP,WAAW,CAACsB,WAAW,CAAC,CAAC,EAAEtB,WAAW,CAACuB,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAEuB,QAAQ,CAACvC,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEmC,QAAQ,CAACH,QAAQ,CAAChC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEmC,QAAQ,CAACH,QAAQ,CAAChC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,kCAAkC,GAAG;cAAG,GAD3O,GAAEJ,IAAK,IAAGoC,QAAS,EAAC;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEvB,CACN,CAAC;YAAA,GAPKnC,IAAI;cAAAgC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAQT,CACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC3C,EAAA,CAhFuBD,cAAc;AAAAiD,EAAA,GAAdjD,cAAc;AAAA,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}