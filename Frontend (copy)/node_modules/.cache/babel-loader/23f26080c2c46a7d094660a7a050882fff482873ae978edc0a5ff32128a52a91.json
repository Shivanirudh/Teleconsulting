{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  // Define dummy schedule data\n  const dummySchedule = {\n    \"slots\": [[2024, 4, 5, 11, 15], [2024, 4, 6, 15, 45], [2024, 4, 7, 15, 0], [2024, 4, 6, 15, 45], [2024, 4, 5, 15, 0]],\n    \"appointments\": [{\n      id: 1,\n      date: [2024, 4, 5],\n      time: '09:00',\n      patientName: 'John Doe'\n    }, {\n      id: 2,\n      date: [2024, 4, 6],\n      time: '10:30',\n      patientName: 'somebody someone'\n    }, {\n      id: 3,\n      date: [2024, 4, 7],\n      time: '11:15',\n      patientName: 'Alice Smith'\n    }, {\n      id: 4,\n      date: [2024, 4, 8],\n      time: '12:00',\n      patientName: 'Bob Johnson'\n    }, {\n      id: 5,\n      date: [2024, 4, 6],\n      time: '09:00',\n      patientName: 'John Doe'\n    }]\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    setSchedule(dummySchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    // Logic to handle cell click goes here\n  };\n  const generateScheduleRows = () => {\n    return schedule.slots.map((slot, slotIndex) => {\n      const [year, month, day, hour, minute] = slot;\n      const date = `${year}-${month}-${day}`;\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          scope: \"row\",\n          children: date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), [9, 10, 11, 12, 13, 14, 15, 16, 17, 18].map((hour, index) => {\n          const time = `${hour}:${index === 0 ? '00' : '45'}`;\n          const appointment = schedule.appointments.find(appt => {\n            return appt.date[0] === year && appt.date[1] === month && appt.date[2] === day && appt.time === time;\n          });\n          const availability = appointment ? 'booked' : 'available';\n          return /*#__PURE__*/_jsxDEV(\"td\", {\n            className: getClassForAvailability(availability),\n            onClick: () => handleCellClick(slotIndex, index)\n          }, `${date}-${hour}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this);\n        })]\n      }, date, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = availability => {\n    switch (availability) {\n      case 'available':\n        return 'table-success bg-success text-white';\n      case 'booked':\n        return 'table-danger bg-danger text-dark';\n      case 'busy':\n        return 'table-secondary bg-secondary text-white';\n      default:\n        return '';\n    }\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box khus\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 17\n              }, this), [9, 10, 11, 12, 13, 14, 15, 16, 17, 18].map(hour => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [hour, \":00\"]\n              }, hour, true, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: generateScheduleRows()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleEdit,\n          children: isEditing ? 'Cancel Edit' : 'Edit Schedule'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"++4b96eULKbdgzoKDSJcjB7i644=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","useEffect","SideNavbar","Navbar","jsxDEV","_jsxDEV","UploadSchedule","_s","dummySchedule","id","date","time","patientName","schedule","setSchedule","isEditing","setIsEditing","handleEdit","handleCellClick","dateIndex","timeIndex","generateScheduleRows","slots","map","slot","slotIndex","year","month","day","hour","minute","children","scope","fileName","_jsxFileName","lineNumber","columnNumber","index","appointment","appointments","find","appt","availability","className","getClassForAvailability","onClick","handleSubmit","alert","Promise","resolve","setTimeout","type","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\n\nexport default function UploadSchedule() {\n  // Define dummy schedule data\n  const dummySchedule = {\n    \"slots\": [\n      [2024, 4, 5, 11, 15],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 7, 15, 0],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 5, 15, 0]\n    ],\n    \"appointments\": [\n      { id: 1, date: [2024, 4, 5], time: '09:00', patientName: 'John Doe' },\n      { id: 2, date: [2024, 4, 6], time: '10:30', patientName: 'somebody someone' },\n      { id: 3, date: [2024, 4, 7], time: '11:15', patientName: 'Alice Smith' },\n      { id: 4, date: [2024, 4, 8], time: '12:00', patientName: 'Bob Johnson' },\n      { id: 5, date: [2024, 4, 6], time: '09:00', patientName: 'John Doe' },\n    ]\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    setSchedule(dummySchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    // Logic to handle cell click goes here\n  };\n\n  const generateScheduleRows = () => {\n    return schedule.slots.map((slot, slotIndex) => {\n      const [year, month, day, hour, minute] = slot;\n      const date = `${year}-${month}-${day}`;\n      return (\n        <tr key={date}>\n          <th scope=\"row\">{date}</th>\n          {[9, 10, 11, 12, 13, 14, 15, 16, 17, 18].map((hour, index) => {\n            const time = `${hour}:${index === 0 ? '00' : '45'}`;\n            const appointment = schedule.appointments.find(appt => {\n              return appt.date[0] === year && appt.date[1] === month && appt.date[2] === day && appt.time === time;\n            });\n            const availability = appointment ? 'booked' : 'available';\n            return (\n              <td\n                key={`${date}-${hour}`}\n                className={getClassForAvailability(availability)}\n                onClick={() => handleCellClick(slotIndex, index)}\n              ></td>\n            );\n          })}\n        </tr>\n      );\n    });\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = (availability) => {\n    switch (availability) {\n      case 'available':\n        return 'table-success bg-success text-white';\n      case 'booked':\n        return 'table-danger bg-danger text-dark';\n      case 'busy':\n        return 'table-secondary bg-secondary text-white';\n      default:\n        return '';\n    }\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className='dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This week's Schedule</h2>\n          <table className=\"table table-bordered custom-box khus\">\n            <thead>\n              <tr>\n                <th></th>\n                {[9, 10, 11, 12, 13, 14, 15, 16, 17, 18].map((hour) => (\n                  <th key={hour}>{hour}:00</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {generateScheduleRows()}\n            </tbody>\n          </table>\n\n          <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleEdit}>\n            {isEditing ? 'Cancel Edit' : 'Edit Schedule'}\n          </button>\n          {isEditing && (\n            <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleSubmit}>\n              Submit\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}