{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  // Dummy schedule data (replace with your actual data source)\n  const initialSchedule = {\n    // Replace with actual schedule data structure (e.g., object with dates and timeslots)\n    '2024-01-01': {\n      '9:00 AM': true,\n      // Green cell (available)\n      '10:00 AM': false,\n      '11:00 AM': false // Grey cell (unavailable)\n      // Add more timeslots as needed\n    }\n    // Add more dates as needed\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState(initialSchedule);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (date, time) => {\n    setSchedule(prevSchedule => ({\n      ...prevSchedule,\n      [date]: {\n        ...prevSchedule[date],\n        [time]: !prevSchedule[date][time]\n      }\n    }));\n  };\n\n  // Function to generate empty schedule (for upload mode)\n  const generateEmptySchedule = () => {\n    const startDate = new Date(); // Replace with your start date\n    const endDate = new Date(startDate);\n    endDate.setDate(startDate.getDate() + 6); // Set end date to 7 days from start date\n\n    const days = [];\n    for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {\n      days.push(date.toISOString().split('T')[0]); // Add dates in YYYY-MM-DD format\n    }\n    const timeslots = ['9:00 AM', '10:00 AM', '11:00 AM', '12:00 PM', '01:00 PM', '02:00 PM', '03:00 PM', '04:00 PM', '05:00 PM', '06:00 PM', '07:00 PM'];\n    return days.reduce((acc, day) => {\n      acc[day] = timeslots.reduce((acc2, time) => {\n        acc2[time] = false; // All cells grey (unavailable) in upload mode\n        return acc2;\n      }, {});\n      return acc;\n    }, {});\n  };\n  const handleUpload = () => {\n    setSchedule(generateEmptySchedule()); // Reset schedule to empty for upload\n    setIsEditing(true); // Enable editing mode for upload\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this), Object.keys(schedule).map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: date\n              }, date, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: Object.entries(schedule).map(([date, timeslots]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"row\",\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this), Object.entries(timeslots).map(([time, available]) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: available ? 'table-success bg-success text-white' : 'table-secondary',\n                onClick: () => isEditing ? handleCellClick(date, time) : null,\n                children: isEditing ? '' : time\n              }, `${date}-${time}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 21\n              }, this))]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleEdit,\n          children: isEditing ? 'Cancel Edit' : 'Edit Schedule'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-success custom-button2\",\n          onClick: handleUpload,\n          children: \"Upload New Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"klLcvemYYk3DhyO3trKug4mxpWc=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","SideNavbar","Navbar","jsxDEV","_jsxDEV","UploadSchedule","_s","initialSchedule","schedule","setSchedule","isEditing","setIsEditing","handleEdit","handleCellClick","date","time","prevSchedule","generateEmptySchedule","startDate","Date","endDate","setDate","getDate","days","push","toISOString","split","timeslots","reduce","acc","day","acc2","handleUpload","handleSubmit","alert","Promise","resolve","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","entries","scope","available","onClick","type","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\n\nexport default function UploadSchedule() {\n  // Dummy schedule data (replace with your actual data source)\n  const initialSchedule = {\n    // Replace with actual schedule data structure (e.g., object with dates and timeslots)\n    '2024-01-01': {\n      '9:00 AM': true, // Green cell (available)\n      '10:00 AM': false,\n      '11:00 AM': false, // Grey cell (unavailable)\n      // Add more timeslots as needed\n    },\n    // Add more dates as needed\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState(initialSchedule);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (date, time) => {\n    setSchedule((prevSchedule) => ({\n      ...prevSchedule,\n      [date]: {\n        ...prevSchedule[date],\n        [time]: !prevSchedule[date][time],\n      },\n    }));\n  };\n\n  // Function to generate empty schedule (for upload mode)\n  const generateEmptySchedule = () => {\n    const startDate = new Date(); // Replace with your start date\n    const endDate = new Date(startDate);\n    endDate.setDate(startDate.getDate() + 6); // Set end date to 7 days from start date\n\n    const days = [];\n    for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {\n      days.push(date.toISOString().split('T')[0]); // Add dates in YYYY-MM-DD format\n    }\n\n    const timeslots = ['9:00 AM', '10:00 AM', '11:00 AM', '12:00 PM','01:00 PM','02:00 PM','03:00 PM','04:00 PM','05:00 PM','06:00 PM','07:00 PM'];\n\n    return days.reduce((acc, day) => {\n      acc[day] = timeslots.reduce((acc2, time) => {\n        acc2[time] = false; // All cells grey (unavailable) in upload mode\n        return acc2;\n      }, {});\n      return acc;\n    }, {});\n  };\n\n  const handleUpload = () => {\n    setSchedule(generateEmptySchedule()); // Reset schedule to empty for upload\n    setIsEditing(true); // Enable editing mode for upload\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className= 'dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This week's Schedule</h2>\n\n          <table className=\"table table-bordered custom-box\">\n            <thead>\n              <tr>\n                <th></th>\n                {Object.keys(schedule).map(date => (\n                  <th key={date}>{date}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(schedule).map(([date, timeslots]) => (\n                <tr key={date}>\n                  <th scope=\"row\">{date}</th>\n                  {Object.entries(timeslots).map(([time, available]) => (\n                    <td\n                      key={`${date}-${time}`}\n                      className={\n                        available ? 'table-success bg-success text-white' : 'table-secondary'\n                      }\n                      onClick={() => (isEditing ? handleCellClick(date, time) : null)}\n                    >\n                      {isEditing ? '' : time}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n\n          <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleEdit}>\n            {isEditing ? 'Cancel Edit' : 'Edit Schedule'}\n          </button>\n          {isEditing ? (\n            <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleSubmit}>\n              Submit\n            </button>\n          ) : (\n            <button type=\"button\" className=\"btn btn-success custom-button2\" onClick={handleUpload}>\n              Upload New Schedule\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}