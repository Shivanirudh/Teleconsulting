{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  // Function to generate time slots with 45-minute intervals\n  const generateTimeSlots = () => {\n    const startTime = 9 * 60; // 9:00 AM in minutes\n    const endTime = 17 * 60 + 15; // 5:15 PM in minutes\n    const interval = 45; // 45 minutes interval\n    const timeSlots = [];\n    for (let i = startTime; i <= endTime; i += interval) {\n      const hours = Math.floor(i / 60);\n      const minutes = i % 60;\n      const formattedTime = `${hours < 10 ? '0' : ''}${hours}:${minutes === 0 ? '00' : minutes}`;\n      timeSlots.push(formattedTime);\n    }\n    return timeSlots;\n  };\n\n  // Dummy schedule data (replace with your actual data source)\n  const dummySchedule = {\n    \"slots\": [[2024, 4, 5, 11, 15], [2024, 4, 6, 15, 45], [2024, 4, 7, 15, 0], [2024, 4, 6, 15, 45], [2024, 4, 5, 15, 0]],\n    \"appointments\": [{\n      id: 1,\n      datetime: [2024, 4, 5, 9, 0],\n      patientName: 'John Doe'\n    }, {\n      id: 2,\n      datetime: [2024, 4, 6, 10, 30],\n      patientName: 'somebody someone'\n    }, {\n      id: 3,\n      datetime: [2024, 4, 7, 11, 15],\n      patientName: 'Alice Smith'\n    }, {\n      id: 5,\n      datetime: [2024, 4, 6, 9, 0],\n      patientName: 'John Doe'\n    }]\n  };\n  const initialSchedule = () => {\n    const today = new Date();\n    const next7Days = Array.from({\n      length: 7\n    }, (_, index) => {\n      const date = new Date(today);\n      date.setDate(date.getDate() + index);\n      return date.toLocaleDateString('en-US');\n    });\n    const timeSlots = generateTimeSlots();\n    const schedule = next7Days.reduce((acc, date) => {\n      acc[date] = timeSlots.reduce((acc2, time) => {\n        acc2[time] = false; // All slots initially unavailable\n        return acc2;\n      }, {});\n      return acc;\n    }, {});\n    dummySchedule.slots.forEach(slot => {\n      const [year, month, day, hour, minute] = slot;\n      const date = new Date(year, month - 1, day);\n      const formattedDate = date.toLocaleDateString('en-US');\n      const formattedTime = `${hour < 10 ? '0' : ''}${hour}:${minute === 0 ? '00' : minute}`;\n      if (schedule[formattedDate] && schedule[formattedDate][formattedTime] !== undefined) {\n        schedule[formattedDate][formattedTime] = true; // Set slot to available\n      }\n    });\n    dummySchedule.appointments.forEach(appointment => {\n      const [year, month, day, hour, minute] = appointment.datetime;\n      const date = new Date(year, month - 1, day);\n      const formattedDate = date.toLocaleDateString('en-US');\n      const formattedTime = `${hour < 10 ? '0' : ''}${hour}:${minute === 0 ? '00' : minute}`;\n      if (schedule[formattedDate] && schedule[formattedDate][formattedTime] !== undefined) {\n        schedule[formattedDate][formattedTime] = 'appointment'; // Set appointment slot\n      }\n    });\n    return schedule;\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState(initialSchedule());\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (date, time) => {\n    if (isEditing) {\n      if (schedule[date][time] === 'appointment') {\n        const confirmed = window.confirm('You are about to cancel an appointment. Are you sure?');\n        if (confirmed) {\n          setSchedule(prevSchedule => ({\n            ...prevSchedule,\n            [date]: {\n              ...prevSchedule[date],\n              [time]: false\n            }\n          }));\n        }\n      } else {\n        setSchedule(prevSchedule => ({\n          ...prevSchedule,\n          [date]: {\n            ...prevSchedule[date],\n            [time]: !prevSchedule[date][time]\n          }\n        }));\n      }\n    }\n  };\n\n  // Function to generate empty schedule (for upload mode)\n  const generateEmptySchedule = () => {\n    const next7Days = Object.keys(schedule);\n    const timeSlots = generateTimeSlots();\n    const emptySchedule = next7Days.reduce((acc, date) => {\n      acc[date] = timeSlots.reduce((acc2, time) => {\n        acc2[time] = false; // All slots initially unavailable\n        return acc2;\n      }, {});\n      return acc;\n    }, {});\n    return emptySchedule;\n  };\n  const handleUpload = () => {\n    setSchedule(generateEmptySchedule()); // Reset schedule to empty for upload\n    setIsEditing(true); // Enable editing mode for upload\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box khus\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 17\n              }, this), generateTimeSlots().map(time => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: time\n              }, time, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: Object.entries(schedule).map(([date, timeslots]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"row\",\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 19\n              }, this), Object.entries(timeslots).map(([time, availability]) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: availability === true ? 'table-success bg-success text-white' : availability === 'appointment' ? 'table-danger bg-danger text-white' : 'table-secondary bg-secondary',\n                onClick: () => isEditing ? handleCellClick(date, time) : null,\n                children: isEditing ? '' : time\n              }, `${date}-${time}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 21\n              }, this))]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleEdit,\n          children: isEditing ? 'Cancel Edit' : 'Edit Schedule'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"o4LgTea3pWGhTx38HRA5P2zME+Q=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","useEffect","SideNavbar","Navbar","jsxDEV","_jsxDEV","UploadSchedule","_s","generateTimeSlots","startTime","endTime","interval","timeSlots","i","hours","Math","floor","minutes","formattedTime","push","dummySchedule","id","datetime","patientName","initialSchedule","today","Date","next7Days","Array","from","length","_","index","date","setDate","getDate","toLocaleDateString","schedule","reduce","acc","acc2","time","slots","forEach","slot","year","month","day","hour","minute","formattedDate","undefined","appointments","appointment","setSchedule","isEditing","setIsEditing","handleEdit","handleCellClick","confirmed","window","confirm","prevSchedule","generateEmptySchedule","Object","keys","emptySchedule","handleUpload","handleSubmit","alert","Promise","resolve","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","entries","timeslots","scope","availability","onClick","type","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\n\nexport default function UploadSchedule() {\n  // Function to generate time slots with 45-minute intervals\n  const generateTimeSlots = () => {\n    const startTime = 9 * 60; // 9:00 AM in minutes\n    const endTime = 17 * 60 + 15; // 5:15 PM in minutes\n    const interval = 45; // 45 minutes interval\n    const timeSlots = [];\n\n    for (let i = startTime; i <= endTime; i += interval) {\n      const hours = Math.floor(i / 60);\n      const minutes = i % 60;\n      const formattedTime = `${hours < 10 ? '0' : ''}${hours}:${minutes === 0 ? '00' : minutes}`;\n      timeSlots.push(formattedTime);\n    }\n\n    return timeSlots;\n  };\n\n  // Dummy schedule data (replace with your actual data source)\n  const dummySchedule = {\n    \"slots\": [\n      [2024, 4, 5, 11, 15],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 7, 15, 0],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 5, 15, 0]\n    ],\n    \"appointments\": [\n      { id: 1, datetime: [2024,4,5,9,0], patientName: 'John Doe' },\n      { id: 2, datetime: [2024,4,6,10,30], patientName: 'somebody someone' },\n      { id: 3, datetime: [2024,4,7,11,15], patientName: 'Alice Smith' },\n      { id: 5, datetime: [2024,4,6,9,0], patientName: 'John Doe' },\n    ]\n  };\n\n  const initialSchedule = () => {\n    const today = new Date();\n    const next7Days = Array.from({ length: 7 }, (_, index) => {\n      const date = new Date(today);\n      date.setDate(date.getDate() + index);\n      return date.toLocaleDateString('en-US');\n    });\n\n    const timeSlots = generateTimeSlots();\n\n    const schedule = next7Days.reduce((acc, date) => {\n      acc[date] = timeSlots.reduce((acc2, time) => {\n        acc2[time] = false; // All slots initially unavailable\n        return acc2;\n      }, {});\n      return acc;\n    }, {});\n\n    dummySchedule.slots.forEach(slot => {\n      const [year, month, day, hour, minute] = slot;\n      const date = new Date(year, month - 1, day);\n      const formattedDate = date.toLocaleDateString('en-US');\n      const formattedTime = `${hour < 10 ? '0' : ''}${hour}:${minute === 0 ? '00' : minute}`;\n      if (schedule[formattedDate] && schedule[formattedDate][formattedTime] !== undefined) {\n        schedule[formattedDate][formattedTime] = true; // Set slot to available\n      }\n    });\n\n    dummySchedule.appointments.forEach(appointment => {\n      const [year, month, day, hour, minute] = appointment.datetime;\n      const date = new Date(year, month - 1, day);\n      const formattedDate = date.toLocaleDateString('en-US');\n      const formattedTime = `${hour < 10 ? '0' : ''}${hour}:${minute === 0 ? '00' : minute}`;\n      if (schedule[formattedDate] && schedule[formattedDate][formattedTime] !== undefined) {\n        schedule[formattedDate][formattedTime] = 'appointment'; // Set appointment slot\n      }\n    });\n\n    return schedule;\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState(initialSchedule());\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (date, time) => {\n    if (isEditing) {\n      if (schedule[date][time] === 'appointment') {\n        const confirmed = window.confirm('You are about to cancel an appointment. Are you sure?');\n        if (confirmed) {\n          setSchedule((prevSchedule) => ({\n            ...prevSchedule,\n            [date]: {\n              ...prevSchedule[date],\n              [time]: false,\n            },\n          }));\n        }\n      } else {\n        setSchedule((prevSchedule) => ({\n          ...prevSchedule,\n          [date]: {\n            ...prevSchedule[date],\n            [time]: !prevSchedule[date][time],\n          },\n        }));\n      }\n    }\n  };\n\n  // Function to generate empty schedule (for upload mode)\n  const generateEmptySchedule = () => {\n    const next7Days = Object.keys(schedule);\n    const timeSlots = generateTimeSlots();\n\n    const emptySchedule = next7Days.reduce((acc, date) => {\n      acc[date] = timeSlots.reduce((acc2, time) => {\n        acc2[time] = false; // All slots initially unavailable\n        return acc2;\n      }, {});\n      return acc;\n    }, {});\n\n    return emptySchedule;\n  };\n\n  const handleUpload = () => {\n    setSchedule(generateEmptySchedule()); // Reset schedule to empty for upload\n    setIsEditing(true); // Enable editing mode for upload\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className= 'dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This week's Schedule</h2>\n          <table className=\"table table-bordered custom-box khus\">\n            <thead>\n              <tr>\n                <th></th>\n                {generateTimeSlots().map(time => (\n                  <th key={time}>{time}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(schedule).map(([date, timeslots]) => (\n                <tr key={date}>\n                  <th scope=\"row\">{date}</th>\n                  {Object.entries(timeslots).map(([time, availability]) => (\n                    <td\n                      key={`${date}-${time}`}\n                      className={\n                        availability === true ? 'table-success bg-success text-white' :\n                        availability === 'appointment' ? 'table-danger bg-danger text-white' :\n                        'table-secondary bg-secondary'\n                      }\n                      onClick={() => (isEditing ? handleCellClick(date, time) : null)}\n                    >\n                      {isEditing ? '' : time}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n\n          <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleEdit}>\n            {isEditing ? 'Cancel Edit' : 'Edit Schedule'}\n          </button>\n          {isEditing ? (\n            <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleSubmit}>\n              Submit\n            </button>\n          ) : (\n            <div/>)}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}