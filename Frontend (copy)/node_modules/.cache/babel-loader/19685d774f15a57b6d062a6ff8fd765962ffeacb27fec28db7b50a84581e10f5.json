{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  const getNextDates = () => {\n    const today = new Date();\n    const dates = [];\n    for (let i = 0; i < 7; i++) {\n      const nextDate = new Date(today);\n      nextDate.setDate(today.getDate() + i);\n      dates.push(nextDate.toISOString().split('T')[0]);\n    }\n    return dates;\n  };\n  // Define dummy schedule data\n  const scheduleData = {\n    \"slots\": [[2024, 4, 5, 11, 15], [2024, 4, 6, 15, 45], [2024, 4, 7, 15, 0], [2024, 4, 2, 15, 45], [2024, 4, 5, 15, 0]],\n    \"appointments\": [{\n      id: 1,\n      date: getNextDates()[0],\n      time: '09:00',\n      patientName: 'John Doe'\n    }, {\n      id: 2,\n      date: getNextDates()[4],\n      time: '10:30',\n      patientName: 'somebody someone'\n    }, {\n      id: 3,\n      date: getNextDates()[1],\n      time: '11:15',\n      patientName: 'Alice Smith'\n    }, {\n      id: 4,\n      date: getNextDates()[3],\n      time: '12:00',\n      patientName: 'Bob Johnson'\n    }, {\n      id: 5,\n      date: getNextDates()[5],\n      time: '09:00',\n      patientName: 'John Doe'\n    }]\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    setSchedule(scheduleData);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    // Do nothing if not in editing mode\n    if (!isEditing) return;\n    const updatedSchedule = {\n      ...schedule\n    };\n\n    // Toggle availability only if not booked\n    if (updatedSchedule.availability[dateIndex][timeIndex] !== 'booked') {\n      updatedSchedule.availability[dateIndex][timeIndex] = updatedSchedule.availability[dateIndex][timeIndex] === 'available' ? 'busy' : 'available';\n      setSchedule(updatedSchedule);\n    }\n  };\n  // Function to format date\n  const formatDate = dateArray => {\n    const [year, month, day] = dateArray;\n    return `${year}-${month}-${day}`;\n  };\n  const generateScheduleRows = () => {\n    if (!schedule || !schedule.slots || !schedule.slots.length) {\n      return null; // Return null if schedule data is not available\n    }\n    return schedule.slots.map((slot, dateIndex) => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          scope: \"row\",\n          children: formatDate(slot)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), Array.from({\n          length: 8\n        }, (_, timeIndex) => {\n          const time = 540 + timeIndex * 45; // 9:00 AM + 45 minutes interval\n          const availability = getAvailability(dateIndex, time);\n          return /*#__PURE__*/_jsxDEV(\"td\", {\n            className: getClassForAvailability(availability),\n            onClick: () => handleCellClick(dateIndex, timeIndex)\n          }, `${dateIndex}-${timeIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this);\n        })]\n      }, dateIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  // Function to get availability for a given slot\n  const getAvailability = (dateIndex, timeIndex) => {\n    const currentTime = schedule.slots[dateIndex][timeIndex + 3];\n    for (const appointment of schedule.appointments) {\n      if (appointment.date === `${schedule.slots[dateIndex][0]}-${schedule.slots[dateIndex][1]}-${schedule.slots[dateIndex][2]}` && appointment.time === formatTime(currentTime)) {\n        return 'booked';\n      }\n    }\n    return 'available';\n  };\n\n  // Function to format time\n  const formatTime = time => {\n    const hours = Math.floor(time / 60);\n    const minutes = time % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = availability => {\n    switch (availability) {\n      case 'available':\n        return 'table-success bg-success text-white';\n      case 'booked':\n        return 'table-danger bg-danger text-dark';\n      case 'busy':\n        return 'table-secondary bg-secondary text-white';\n      default:\n        return '';\n    }\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box khus\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"9:00 AM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"9:45 AM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"10:30 AM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"11:15 AM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"12:00 PM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"12:45 PM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"01:30 PM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"02:15 PM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"03:00 PM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"03:45 PM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: generateScheduleRows()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleEdit,\n          children: isEditing ? 'Cancel Edit' : 'Edit Schedule'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"++4b96eULKbdgzoKDSJcjB7i644=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","useEffect","SideNavbar","Navbar","jsxDEV","_jsxDEV","UploadSchedule","_s","getNextDates","today","Date","dates","i","nextDate","setDate","getDate","push","toISOString","split","scheduleData","id","date","time","patientName","schedule","setSchedule","isEditing","setIsEditing","handleEdit","handleCellClick","dateIndex","timeIndex","updatedSchedule","availability","formatDate","dateArray","year","month","day","generateScheduleRows","slots","length","map","slot","children","scope","fileName","_jsxFileName","lineNumber","columnNumber","Array","from","_","getAvailability","className","getClassForAvailability","onClick","currentTime","appointment","appointments","formatTime","hours","Math","floor","minutes","toString","padStart","handleSubmit","alert","Promise","resolve","setTimeout","type","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\n\nexport default function UploadSchedule() {\n  const getNextDates = () => {\n    const today = new Date();\n    const dates = [];\n\n    for (let i = 0; i < 7; i++) {\n      const nextDate = new Date(today);\n      nextDate.setDate(today.getDate() + i);\n      dates.push(nextDate.toISOString().split('T')[0]);\n    }\n\n    return dates;\n  };\n  // Define dummy schedule data\n  const scheduleData = {\n    \"slots\": [\n      [2024, 4, 5, 11, 15],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 7, 15, 0],\n      [2024, 4, 2, 15, 45],\n      [2024, 4, 5, 15, 0]\n    ],\n    \"appointments\": [\n      { id: 1, date: getNextDates()[0], time: '09:00', patientName: 'John Doe' },\n      { id: 2, date: getNextDates()[4], time: '10:30', patientName: 'somebody someone' },\n      { id: 3, date: getNextDates()[1], time: '11:15', patientName: 'Alice Smith' },\n      { id: 4, date: getNextDates()[3], time: '12:00', patientName: 'Bob Johnson' },\n      { id: 5, date: getNextDates()[5], time: '09:00', patientName: 'John Doe' },\n    ]\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    setSchedule(scheduleData);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    // Do nothing if not in editing mode\n    if (!isEditing) return;\n\n    const updatedSchedule = { ...schedule };\n\n    // Toggle availability only if not booked\n    if (updatedSchedule.availability[dateIndex][timeIndex] !== 'booked') {\n      updatedSchedule.availability[dateIndex][timeIndex] =\n        updatedSchedule.availability[dateIndex][timeIndex] === 'available' ? 'busy' : 'available';\n\n      setSchedule(updatedSchedule);\n    }\n  };\n  // Function to format date\nconst formatDate = (dateArray) => {\n  const [year, month, day] = dateArray;\n  return `${year}-${month}-${day}`;\n};\n\n\n  const generateScheduleRows = () => {\n    if (!schedule || !schedule.slots || !schedule.slots.length) {\n      return null; // Return null if schedule data is not available\n    }\n  \n    return schedule.slots.map((slot, dateIndex) => {\n      return (\n        <tr key={dateIndex}>\n          <th scope=\"row\">{formatDate(slot)}</th>\n          {Array.from({ length: 8 }, (_, timeIndex) => {\n            const time = 540 + timeIndex * 45; // 9:00 AM + 45 minutes interval\n            const availability = getAvailability(dateIndex, time);\n            return (\n              <td\n                key={`${dateIndex}-${timeIndex}`}\n                className={getClassForAvailability(availability)}\n                onClick={() => handleCellClick(dateIndex, timeIndex)}\n              ></td>\n            );\n          })}\n        </tr>\n      );\n    });\n  };\n  // Function to get availability for a given slot\n  const getAvailability = (dateIndex, timeIndex) => {\n    const currentTime = schedule.slots[dateIndex][timeIndex + 3];\n    for (const appointment of schedule.appointments) {\n      if (appointment.date === `${schedule.slots[dateIndex][0]}-${schedule.slots[dateIndex][1]}-${schedule.slots[dateIndex][2]}` && appointment.time === formatTime(currentTime)) {\n        return 'booked';\n      }\n    }\n    return 'available';\n  };\n\n  // Function to format time\n  const formatTime = (time) => {\n    const hours = Math.floor(time / 60);\n    const minutes = time % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = (availability) => {\n    switch (availability) {\n      case 'available':\n        return 'table-success bg-success text-white';\n      case 'booked':\n        return 'table-danger bg-danger text-dark';\n      case 'busy':\n        return 'table-secondary bg-secondary text-white';\n      default:\n        return '';\n    }\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n\n\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className='dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This week's Schedule</h2>\n          <table className=\"table table-bordered custom-box khus\">\n            <thead>\n              <tr>\n                <th></th>\n                <th>9:00 AM</th>\n                <th>9:45 AM</th>\n                <th>10:30 AM</th>\n                <th>11:15 AM</th>\n                <th>12:00 PM</th>\n                <th>12:45 PM</th>\n                <th>01:30 PM</th>\n                <th>02:15 PM</th>\n                <th>03:00 PM</th>\n                <th>03:45 PM</th>\n              </tr>\n            </thead>\n            <tbody>\n              {generateScheduleRows()}\n            </tbody>\n          </table>\n\n          <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleEdit}>\n            {isEditing ? 'Cancel Edit' : 'Edit Schedule'}\n          </button>\n          {isEditing && (\n            <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleSubmit}>\n              Submit\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}