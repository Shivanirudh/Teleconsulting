{"ast":null,"code":"var _jsxFileName = \"/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadSchedule() {\n  _s();\n  // Define dummy schedule data\n  const dummySchedule = {\n    \"slots\": [[2024, 4, 5, 11, 15], [2024, 4, 6, 15, 45], [2024, 4, 7, 15, 0], [2024, 4, 6, 15, 45], [2024, 4, 5, 15, 0]],\n    \"appointments\": [{\n      id: 1,\n      date: '2024,4,5',\n      time: '09:00',\n      patientName: 'John Doe'\n    }, {\n      id: 2,\n      date: '2024,4,6',\n      time: '10:30',\n      patientName: 'somebody someone'\n    }, {\n      id: 3,\n      date: '2024,4,7',\n      time: '11:15',\n      patientName: 'Alice Smith'\n    }, {\n      id: 5,\n      date: '2024,4,6',\n      time: '09:00',\n      patientName: 'John Doe'\n    }]\n  };\n\n  // Function to generate date objects from string dates\n  const generateDateObjects = dateStrings => {\n    return dateStrings.map(dateString => {\n      const [year, month, day] = dateString.split(',').map(Number);\n      return new Date(year, month - 1, day); // month - 1 because months are zero-indexed in JavaScript Date objects\n    });\n  };\n\n  // Extract unique dates from slots and appointments\n  const allDates = [...new Set(dummySchedule.slots.map(slot => slot.slice(0, 3).join(','))), ...new Set(dummySchedule.appointments.map(appointment => appointment.date))];\n  const uniqueDates = generateDateObjects(allDates);\n\n  // Generate time slots\n  const generateTimeSlots = () => {\n    const timeSlots = [];\n    for (let hour = 9; hour <= 15; hour++) {\n      for (let minute = 0; minute < 60; minute += 45) {\n        timeSlots.push(`${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`);\n      }\n    }\n    return timeSlots;\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    const initialSchedule = uniqueDates.map(date => {\n      const dateString = `${date.getFullYear()},${date.getMonth() + 1},${date.getDate()}`;\n      const availability = generateTimeSlots().map(time => {\n        const dateTime = `${dateString},${time}`;\n        if (dummySchedule.appointments.some(appointment => appointment.date === dateString && appointment.time === time)) {\n          return 'booked';\n        } else if (dummySchedule.slots.some(slot => slot.slice(0, 5).join(',') === dateTime)) {\n          return 'available';\n        } else {\n          return 'busy';\n        }\n      });\n      return {\n        date: dateString,\n        availability\n      };\n    });\n    setSchedule(initialSchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    if (isEditing) {\n      const updatedSchedule = [...schedule];\n      const cellValue = updatedSchedule[dateIndex].availability[timeIndex];\n      if (cellValue !== 'booked') {\n        updatedSchedule[dateIndex].availability[timeIndex] = cellValue === 'available' ? 'busy' : 'available';\n        setSchedule(updatedSchedule);\n      }\n    }\n  };\n\n  // Function to generate table rows\n  const generateScheduleRows = () => {\n    return schedule.map((item, dateIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        scope: \"row\",\n        children: item.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), item.availability.map((availability, timeIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n        className: getClassForAvailability(availability),\n        onClick: () => handleCellClick(dateIndex, timeIndex)\n      }, `${item.date}-${timeIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))]\n    }, item.date, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this));\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = availability => {\n    switch (availability) {\n      case 'available':\n        return 'table-success bg-success text-white';\n      case 'booked':\n        return 'table-danger bg-danger text-dark';\n      case 'busy':\n        return 'table-secondary bg-secondary text-white';\n      default:\n        return '';\n    }\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SideNavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"This week's Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-bordered custom-box khus\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 17\n              }, this), generateTimeSlots().map(time => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: time\n              }, time, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: generateScheduleRows()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleEdit,\n          children: isEditing ? 'Cancel Edit' : 'Edit Schedule'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary custom-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSchedule, \"++4b96eULKbdgzoKDSJcjB7i644=\");\n_c = UploadSchedule;\nvar _c;\n$RefreshReg$(_c, \"UploadSchedule\");","map":{"version":3,"names":["React","useState","useEffect","SideNavbar","Navbar","jsxDEV","_jsxDEV","UploadSchedule","_s","dummySchedule","id","date","time","patientName","generateDateObjects","dateStrings","map","dateString","year","month","day","split","Number","Date","allDates","Set","slots","slot","slice","join","appointments","appointment","uniqueDates","generateTimeSlots","timeSlots","hour","minute","push","toString","padStart","schedule","setSchedule","isEditing","setIsEditing","initialSchedule","getFullYear","getMonth","getDate","availability","dateTime","some","handleEdit","handleCellClick","dateIndex","timeIndex","updatedSchedule","cellValue","generateScheduleRows","item","children","scope","fileName","_jsxFileName","lineNumber","columnNumber","className","getClassForAvailability","onClick","handleSubmit","alert","Promise","resolve","setTimeout","type","_c","$RefreshReg$"],"sources":["/home/aksh2002/Desktop/Teleconsulting/Frontend (copy)/src/pages/Doctor/uploadschedule.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\nimport SideNavbar from \"../../components/Doctor/sidenavbar\";\nimport Navbar from \"../../components/Doctor/Navbar\";\nimport \"../../css/Doctor/ddashboard.css\";\n\nexport default function UploadSchedule() {\n  // Define dummy schedule data\n  const dummySchedule = {\n    \"slots\": [\n      [2024, 4, 5, 11, 15],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 7, 15, 0],\n      [2024, 4, 6, 15, 45],\n      [2024, 4, 5, 15, 0]\n    ],\n    \"appointments\": [\n      { id: 1, date: '2024,4,5', time: '09:00', patientName: 'John Doe' },\n      { id: 2, date: '2024,4,6', time: '10:30', patientName: 'somebody someone' },\n      { id: 3, date: '2024,4,7', time: '11:15', patientName: 'Alice Smith' },\n      { id: 5, date: '2024,4,6', time: '09:00', patientName: 'John Doe' },\n    ]\n  };\n\n  // Function to generate date objects from string dates\n  const generateDateObjects = (dateStrings) => {\n    return dateStrings.map(dateString => {\n      const [year, month, day] = dateString.split(',').map(Number);\n      return new Date(year, month - 1, day); // month - 1 because months are zero-indexed in JavaScript Date objects\n    });\n  };\n\n  // Extract unique dates from slots and appointments\n  const allDates = [...new Set(dummySchedule.slots.map(slot => slot.slice(0, 3).join(','))), ...new Set(dummySchedule.appointments.map(appointment => appointment.date))];\n  const uniqueDates = generateDateObjects(allDates);\n\n  // Generate time slots\n  const generateTimeSlots = () => {\n    const timeSlots = [];\n    for (let hour = 9; hour <= 15; hour++) {\n      for (let minute = 0; minute < 60; minute += 45) {\n        timeSlots.push(`${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`);\n      }\n    }\n    return timeSlots;\n  };\n\n  // State for schedule data\n  const [schedule, setSchedule] = useState([]);\n\n  // State for editing mode\n  const [isEditing, setIsEditing] = useState(false);\n\n  useEffect(() => {\n    // Initialize schedule with dummy data\n    const initialSchedule = uniqueDates.map(date => {\n      const dateString = `${date.getFullYear()},${date.getMonth() + 1},${date.getDate()}`;\n      const availability = generateTimeSlots().map(time => {\n        const dateTime = `${dateString},${time}`;\n        if (dummySchedule.appointments.some(appointment => appointment.date === dateString && appointment.time === time)) {\n          return 'booked';\n        } else if (dummySchedule.slots.some(slot => slot.slice(0, 5).join(',') === dateTime)) {\n          return 'available';\n        } else {\n          return 'busy';\n        }\n      });\n      return { date: dateString, availability };\n    });\n    setSchedule(initialSchedule);\n  }, []);\n\n  // Function to toggle editing mode\n  const handleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Function to handle cell click (toggle availability)\n  const handleCellClick = (dateIndex, timeIndex) => {\n    if (isEditing) {\n      const updatedSchedule = [...schedule];\n      const cellValue = updatedSchedule[dateIndex].availability[timeIndex];\n      if (cellValue !== 'booked') {\n        updatedSchedule[dateIndex].availability[timeIndex] = cellValue === 'available' ? 'busy' : 'available';\n        setSchedule(updatedSchedule);\n      }\n    }\n  };\n\n  // Function to generate table rows\n  const generateScheduleRows = () => {\n    return schedule.map((item, dateIndex) => (\n      <tr key={item.date}>\n        <th scope=\"row\">{item.date}</th>\n        {item.availability.map((availability, timeIndex) => (\n          <td\n            key={`${item.date}-${timeIndex}`}\n            className={getClassForAvailability(availability)}\n            onClick={() => handleCellClick(dateIndex, timeIndex)}\n          ></td>\n        ))}\n      </tr>\n    ));\n  };\n\n  // Function to get CSS class for cell based on availability\n  const getClassForAvailability = (availability) => {\n    switch (availability) {\n      case 'available':\n        return 'table-success bg-success text-white';\n      case 'booked':\n        return 'table-danger bg-danger text-dark';\n      case 'busy':\n        return 'table-secondary bg-secondary text-white';\n      default:\n        return '';\n    }\n  };\n\n  // Function to simulate saving the schedule (replace with actual logic)\n  const handleSubmit = async () => {\n    alert('Saving schedule...');\n\n    // Replace with your actual saving logic (e.g., API call)\n    // This example simulates a successful save after 2 seconds\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    setIsEditing(false); // Reset edit mode after successful save\n  };\n\n  return (\n    <div className='dashboard-container'>\n      <Navbar />\n      <div className= 'dashboard-content'>\n        <SideNavbar />\n        <div className=\"main-content\">\n          <h2>This week's Schedule</h2>\n          <table className=\"table table-bordered custom-box khus\">\n            <thead>\n              <tr>\n                <th></th>\n                {generateTimeSlots().map(time => (\n                  <th key={time}>{time}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {generateScheduleRows()}\n            </tbody>\n          </table>\n\n          <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleEdit}>\n            {isEditing ? 'Cancel Edit' : 'Edit Schedule'}\n          </button>\n          {isEditing && (\n            <button type=\"button\" className=\"btn btn-primary custom-button\" onClick={handleSubmit}>\n              Submit\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}